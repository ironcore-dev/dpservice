// SPDX-FileCopyrightText: 2022 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: proto/dpdk.proto

package dpdkproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// // ENUMS
type InterfaceType int32

const (
	InterfaceType_VIRTUAL   InterfaceType = 0
	InterfaceType_BAREMETAL InterfaceType = 1
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "VIRTUAL",
		1: "BAREMETAL",
	}
	InterfaceType_value = map[string]int32{
		"VIRTUAL":   0,
		"BAREMETAL": 1,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[0].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[0]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{0}
}

type IpVersion int32

const (
	IpVersion_IPV4 IpVersion = 0
	IpVersion_IPV6 IpVersion = 1
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IpVersion_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[1].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[1]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{1}
}

type Protocol int32

const (
	Protocol_UNDEFINED Protocol = 0 // "Undefined" will set up a layer 3 firewall rule and does not filter on layer 4 protocol details.
	Protocol_ICMP      Protocol = 1
	Protocol_TCP       Protocol = 6
	Protocol_UDP       Protocol = 17
	Protocol_ICMPV6    Protocol = 58
	Protocol_SCTP      Protocol = 132
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:   "UNDEFINED",
		1:   "ICMP",
		6:   "TCP",
		17:  "UDP",
		58:  "ICMPV6",
		132: "SCTP",
	}
	Protocol_value = map[string]int32{
		"UNDEFINED": 0,
		"ICMP":      1,
		"TCP":       6,
		"UDP":       17,
		"ICMPV6":    58,
		"SCTP":      132,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{2}
}

type TrafficDirection int32

const (
	TrafficDirection_INGRESS TrafficDirection = 0
	TrafficDirection_EGRESS  TrafficDirection = 1
)

// Enum value maps for TrafficDirection.
var (
	TrafficDirection_name = map[int32]string{
		0: "INGRESS",
		1: "EGRESS",
	}
	TrafficDirection_value = map[string]int32{
		"INGRESS": 0,
		"EGRESS":  1,
	}
)

func (x TrafficDirection) Enum() *TrafficDirection {
	p := new(TrafficDirection)
	*p = x
	return p
}

func (x TrafficDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[3].Descriptor()
}

func (TrafficDirection) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[3]
}

func (x TrafficDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficDirection.Descriptor instead.
func (TrafficDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{3}
}

type FirewallAction int32

const (
	FirewallAction_DROP   FirewallAction = 0
	FirewallAction_ACCEPT FirewallAction = 1
)

// Enum value maps for FirewallAction.
var (
	FirewallAction_name = map[int32]string{
		0: "DROP",
		1: "ACCEPT",
	}
	FirewallAction_value = map[string]int32{
		"DROP":   0,
		"ACCEPT": 1,
	}
)

func (x FirewallAction) Enum() *FirewallAction {
	p := new(FirewallAction)
	*p = x
	return p
}

func (x FirewallAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirewallAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[4].Descriptor()
}

func (FirewallAction) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[4]
}

func (x FirewallAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirewallAction.Descriptor instead.
func (FirewallAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{4}
}

type VniType int32

const (
	VniType_VNI_IPV4 VniType = 0
	VniType_VNI_IPV6 VniType = 1
	VniType_VNI_BOTH VniType = 2
)

// Enum value maps for VniType.
var (
	VniType_name = map[int32]string{
		0: "VNI_IPV4",
		1: "VNI_IPV6",
		2: "VNI_BOTH",
	}
	VniType_value = map[string]int32{
		"VNI_IPV4": 0,
		"VNI_IPV6": 1,
		"VNI_BOTH": 2,
	}
)

func (x VniType) Enum() *VniType {
	p := new(VniType)
	*p = x
	return p
}

func (x VniType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VniType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[5].Descriptor()
}

func (VniType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[5]
}

func (x VniType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VniType.Descriptor instead.
func (VniType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{5}
}

type CaptureInterfaceType int32

const (
	CaptureInterfaceType_SINGLE_PF CaptureInterfaceType = 0
	CaptureInterfaceType_SINGLE_VF CaptureInterfaceType = 1
)

// Enum value maps for CaptureInterfaceType.
var (
	CaptureInterfaceType_name = map[int32]string{
		0: "SINGLE_PF",
		1: "SINGLE_VF",
	}
	CaptureInterfaceType_value = map[string]int32{
		"SINGLE_PF": 0,
		"SINGLE_VF": 1,
	}
)

func (x CaptureInterfaceType) Enum() *CaptureInterfaceType {
	p := new(CaptureInterfaceType)
	*p = x
	return p
}

func (x CaptureInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptureInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[6].Descriptor()
}

func (CaptureInterfaceType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[6]
}

func (x CaptureInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptureInterfaceType.Descriptor instead.
func (CaptureInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{6}
}

// // STRUCTURES
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipver   IpVersion `protobuf:"varint,1,opt,name=ipver,proto3,enum=dpdkironcore.v1.IpVersion" json:"ipver,omitempty"`
	Address []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // holds 4 bytes (IpVersion::IPV4) or 16 bytes (IpVersion::IPV6)
}

func (x *IpAddress) Reset() {
	*x = IpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddress) ProtoMessage() {}

func (x *IpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddress.ProtoReflect.Descriptor instead.
func (*IpAddress) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{2}
}

func (x *IpAddress) GetIpver() IpVersion {
	if x != nil {
		return x.Ipver
	}
	return IpVersion_IPV4
}

func (x *IpAddress) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip            *IpAddress `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Length        uint32     `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` // max length is 32 for IPv4 and 128 for IPv6 (based on ip->ipver)
	UnderlayRoute []byte     `protobuf:"bytes,3,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{3}
}

func (x *Prefix) GetIp() *IpAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Prefix) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Prefix) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             []byte          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vni            uint32          `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	PrimaryIpv4    []byte          `protobuf:"bytes,3,opt,name=primary_ipv4,json=primaryIpv4,proto3" json:"primary_ipv4,omitempty"`
	PrimaryIpv6    []byte          `protobuf:"bytes,4,opt,name=primary_ipv6,json=primaryIpv6,proto3" json:"primary_ipv6,omitempty"`
	UnderlayRoute  []byte          `protobuf:"bytes,5,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
	PciName        string          `protobuf:"bytes,6,opt,name=pci_name,json=pciName,proto3" json:"pci_name,omitempty"`
	MeteringParams *MeteringParams `protobuf:"bytes,7,opt,name=meteringParams,proto3" json:"meteringParams,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{4}
}

func (x *Interface) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Interface) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Interface) GetPrimaryIpv4() []byte {
	if x != nil {
		return x.PrimaryIpv4
	}
	return nil
}

func (x *Interface) GetPrimaryIpv6() []byte {
	if x != nil {
		return x.PrimaryIpv6
	}
	return nil
}

func (x *Interface) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

func (x *Interface) GetPciName() string {
	if x != nil {
		return x.PciName
	}
	return ""
}

func (x *Interface) GetMeteringParams() *MeteringParams {
	if x != nil {
		return x.MeteringParams
	}
	return nil
}

type IpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryAddress []byte `protobuf:"bytes,1,opt,name=primary_address,json=primaryAddress,proto3" json:"primary_address,omitempty"`
}

func (x *IpConfig) Reset() {
	*x = IpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpConfig) ProtoMessage() {}

func (x *IpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpConfig.ProtoReflect.Descriptor instead.
func (*IpConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{5}
}

func (x *IpConfig) GetPrimaryAddress() []byte {
	if x != nil {
		return x.PrimaryAddress
	}
	return nil
}

type PxeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextServer   string `protobuf:"bytes,1,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	BootFilename string `protobuf:"bytes,2,opt,name=boot_filename,json=bootFilename,proto3" json:"boot_filename,omitempty"`
}

func (x *PxeConfig) Reset() {
	*x = PxeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxeConfig) ProtoMessage() {}

func (x *PxeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxeConfig.ProtoReflect.Descriptor instead.
func (*PxeConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{6}
}

func (x *PxeConfig) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *PxeConfig) GetBootFilename() string {
	if x != nil {
		return x.BootFilename
	}
	return ""
}

type VirtualFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Linux VF NIC device name
	// TODO: Not available anymore, remove in next breaking change
	Domain   uint32 `protobuf:"varint,2,opt,name=domain,proto3" json:"domain,omitempty"`     // PCIe Domain
	Bus      uint32 `protobuf:"varint,3,opt,name=bus,proto3" json:"bus,omitempty"`           // PCIe Bus
	Slot     uint32 `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`         // PCIe Slot
	Function uint32 `protobuf:"varint,5,opt,name=function,proto3" json:"function,omitempty"` // PCIe Function
}

func (x *VirtualFunction) Reset() {
	*x = VirtualFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualFunction) ProtoMessage() {}

func (x *VirtualFunction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualFunction.ProtoReflect.Descriptor instead.
func (*VirtualFunction) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{7}
}

func (x *VirtualFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualFunction) GetDomain() uint32 {
	if x != nil {
		return x.Domain
	}
	return 0
}

func (x *VirtualFunction) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *VirtualFunction) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *VirtualFunction) GetFunction() uint32 {
	if x != nil {
		return x.Function
	}
	return 0
}

type LbPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=dpdkironcore.v1.Protocol" json:"protocol,omitempty"`
}

func (x *LbPort) Reset() {
	*x = LbPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LbPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LbPort) ProtoMessage() {}

func (x *LbPort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LbPort.ProtoReflect.Descriptor instead.
func (*LbPort) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{8}
}

func (x *LbPort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LbPort) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_UNDEFINED
}

type NatEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatIp         *IpAddress `protobuf:"bytes,1,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
	MinPort       uint32     `protobuf:"varint,2,opt,name=min_port,json=minPort,proto3" json:"min_port,omitempty"`
	MaxPort       uint32     `protobuf:"varint,3,opt,name=max_port,json=maxPort,proto3" json:"max_port,omitempty"`
	UnderlayRoute []byte     `protobuf:"bytes,4,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
	Vni           uint32     `protobuf:"varint,5,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *NatEntry) Reset() {
	*x = NatEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatEntry) ProtoMessage() {}

func (x *NatEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatEntry.ProtoReflect.Descriptor instead.
func (*NatEntry) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{9}
}

func (x *NatEntry) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

func (x *NatEntry) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *NatEntry) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

func (x *NatEntry) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

func (x *NatEntry) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix         *Prefix    `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NexthopVni     uint32     `protobuf:"varint,2,opt,name=nexthop_vni,json=nexthopVni,proto3" json:"nexthop_vni,omitempty"`
	NexthopAddress *IpAddress `protobuf:"bytes,3,opt,name=nexthop_address,json=nexthopAddress,proto3" json:"nexthop_address,omitempty"`
	Weight         uint32     `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{10}
}

func (x *Route) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Route) GetNexthopVni() uint32 {
	if x != nil {
		return x.NexthopVni
	}
	return 0
}

func (x *Route) GetNexthopAddress() *IpAddress {
	if x != nil {
		return x.NexthopAddress
	}
	return nil
}

func (x *Route) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type IcmpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IcmpType int32 `protobuf:"varint,1,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"` // -1 matches all ICMP Codes
	IcmpCode int32 `protobuf:"varint,2,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"` // -1 matches all ICMP Types
}

func (x *IcmpFilter) Reset() {
	*x = IcmpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcmpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcmpFilter) ProtoMessage() {}

func (x *IcmpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcmpFilter.ProtoReflect.Descriptor instead.
func (*IcmpFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{11}
}

func (x *IcmpFilter) GetIcmpType() int32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *IcmpFilter) GetIcmpCode() int32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

type TcpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPortLower int32 `protobuf:"varint,1,opt,name=src_port_lower,json=srcPortLower,proto3" json:"src_port_lower,omitempty"` // -1 matches all source ports
	SrcPortUpper int32 `protobuf:"varint,2,opt,name=src_port_upper,json=srcPortUpper,proto3" json:"src_port_upper,omitempty"`
	DstPortLower int32 `protobuf:"varint,3,opt,name=dst_port_lower,json=dstPortLower,proto3" json:"dst_port_lower,omitempty"` // -1 matches all destination ports
	DstPortUpper int32 `protobuf:"varint,4,opt,name=dst_port_upper,json=dstPortUpper,proto3" json:"dst_port_upper,omitempty"`
}

func (x *TcpFilter) Reset() {
	*x = TcpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpFilter) ProtoMessage() {}

func (x *TcpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpFilter.ProtoReflect.Descriptor instead.
func (*TcpFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{12}
}

func (x *TcpFilter) GetSrcPortLower() int32 {
	if x != nil {
		return x.SrcPortLower
	}
	return 0
}

func (x *TcpFilter) GetSrcPortUpper() int32 {
	if x != nil {
		return x.SrcPortUpper
	}
	return 0
}

func (x *TcpFilter) GetDstPortLower() int32 {
	if x != nil {
		return x.DstPortLower
	}
	return 0
}

func (x *TcpFilter) GetDstPortUpper() int32 {
	if x != nil {
		return x.DstPortUpper
	}
	return 0
}

type UdpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPortLower int32 `protobuf:"varint,1,opt,name=src_port_lower,json=srcPortLower,proto3" json:"src_port_lower,omitempty"` // -1 matches all source ports
	SrcPortUpper int32 `protobuf:"varint,2,opt,name=src_port_upper,json=srcPortUpper,proto3" json:"src_port_upper,omitempty"`
	DstPortLower int32 `protobuf:"varint,3,opt,name=dst_port_lower,json=dstPortLower,proto3" json:"dst_port_lower,omitempty"` // -1 matches all destination ports
	DstPortUpper int32 `protobuf:"varint,4,opt,name=dst_port_upper,json=dstPortUpper,proto3" json:"dst_port_upper,omitempty"`
}

func (x *UdpFilter) Reset() {
	*x = UdpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdpFilter) ProtoMessage() {}

func (x *UdpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdpFilter.ProtoReflect.Descriptor instead.
func (*UdpFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{13}
}

func (x *UdpFilter) GetSrcPortLower() int32 {
	if x != nil {
		return x.SrcPortLower
	}
	return 0
}

func (x *UdpFilter) GetSrcPortUpper() int32 {
	if x != nil {
		return x.SrcPortUpper
	}
	return 0
}

func (x *UdpFilter) GetDstPortLower() int32 {
	if x != nil {
		return x.DstPortLower
	}
	return 0
}

func (x *UdpFilter) GetDstPortUpper() int32 {
	if x != nil {
		return x.DstPortUpper
	}
	return 0
}

type ProtocolFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ProtocolFilter_Icmp
	//	*ProtocolFilter_Tcp
	//	*ProtocolFilter_Udp
	Filter isProtocolFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ProtocolFilter) Reset() {
	*x = ProtocolFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolFilter) ProtoMessage() {}

func (x *ProtocolFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolFilter.ProtoReflect.Descriptor instead.
func (*ProtocolFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{14}
}

func (m *ProtocolFilter) GetFilter() isProtocolFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ProtocolFilter) GetIcmp() *IcmpFilter {
	if x, ok := x.GetFilter().(*ProtocolFilter_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (x *ProtocolFilter) GetTcp() *TcpFilter {
	if x, ok := x.GetFilter().(*ProtocolFilter_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *ProtocolFilter) GetUdp() *UdpFilter {
	if x, ok := x.GetFilter().(*ProtocolFilter_Udp); ok {
		return x.Udp
	}
	return nil
}

type isProtocolFilter_Filter interface {
	isProtocolFilter_Filter()
}

type ProtocolFilter_Icmp struct {
	Icmp *IcmpFilter `protobuf:"bytes,1,opt,name=icmp,proto3,oneof"`
}

type ProtocolFilter_Tcp struct {
	Tcp *TcpFilter `protobuf:"bytes,2,opt,name=tcp,proto3,oneof"`
}

type ProtocolFilter_Udp struct {
	Udp *UdpFilter `protobuf:"bytes,3,opt,name=udp,proto3,oneof"`
}

func (*ProtocolFilter_Icmp) isProtocolFilter_Filter() {}

func (*ProtocolFilter_Tcp) isProtocolFilter_Filter() {}

func (*ProtocolFilter_Udp) isProtocolFilter_Filter() {}

// only for virtual interfaces
type MeteringParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRate  uint64 `protobuf:"varint,1,opt,name=total_rate,json=totalRate,proto3" json:"total_rate,omitempty"`    // in mbps (Mbits/s), regulated rate for all outgoing traffic
	PublicRate uint64 `protobuf:"varint,2,opt,name=public_rate,json=publicRate,proto3" json:"public_rate,omitempty"` // in mbps (Mbits/s), regulated rate for outgoing traffic to public networks
}

func (x *MeteringParams) Reset() {
	*x = MeteringParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeteringParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteringParams) ProtoMessage() {}

func (x *MeteringParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteringParams.ProtoReflect.Descriptor instead.
func (*MeteringParams) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{15}
}

func (x *MeteringParams) GetTotalRate() uint64 {
	if x != nil {
		return x.TotalRate
	}
	return 0
}

func (x *MeteringParams) GetPublicRate() uint64 {
	if x != nil {
		return x.PublicRate
	}
	return 0
}

// Firewall Rules can be inserted and removed while the interface is running. Linked list is used despite O(n) nature, as the list
// needs to be traversed only once for each packet. (Stateful Firewall and each pass after that is O(1))
// Firewall rules have a priority. "0" being the highest and "65536" being the lowest. Default is "1000".
// Current implementation supports only "allow" rules. The priority doesnt have any influence when we have only "allow" rules.
// Without any installed rule, egress default is "allow" everything and ingress default is "deny" everything. With first installed
// egress rule, egress default changes to "deny" everything except the installed rule(s).
// When a packet matches a firewall rule, the defined action is taken. No further firewall rules will be evaluated thereafter.
type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []byte           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Direction         TrafficDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=dpdkironcore.v1.TrafficDirection" json:"direction,omitempty"`
	Action            FirewallAction   `protobuf:"varint,3,opt,name=action,proto3,enum=dpdkironcore.v1.FirewallAction" json:"action,omitempty"`           // Can be only "accept" at the moment.
	Priority          uint32           `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`                                           // For future use. No effect at the moment.
	SourcePrefix      *Prefix          `protobuf:"bytes,5,opt,name=source_prefix,json=sourcePrefix,proto3" json:"source_prefix,omitempty"`                // 0.0.0.0 with prefix length 0 matches all source ips
	DestinationPrefix *Prefix          `protobuf:"bytes,6,opt,name=destination_prefix,json=destinationPrefix,proto3" json:"destination_prefix,omitempty"` // 0.0.0.0 with prefix length 0 matches all destination ips
	ProtocolFilter    *ProtocolFilter  `protobuf:"bytes,7,opt,name=protocol_filter,json=protocolFilter,proto3" json:"protocol_filter,omitempty"`          // Not defining a protocol filter matches all protocols
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{16}
}

func (x *FirewallRule) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FirewallRule) GetDirection() TrafficDirection {
	if x != nil {
		return x.Direction
	}
	return TrafficDirection_INGRESS
}

func (x *FirewallRule) GetAction() FirewallAction {
	if x != nil {
		return x.Action
	}
	return FirewallAction_DROP
}

func (x *FirewallRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FirewallRule) GetSourcePrefix() *Prefix {
	if x != nil {
		return x.SourcePrefix
	}
	return nil
}

func (x *FirewallRule) GetDestinationPrefix() *Prefix {
	if x != nil {
		return x.DestinationPrefix
	}
	return nil
}

func (x *FirewallRule) GetProtocolFilter() *ProtocolFilter {
	if x != nil {
		return x.ProtocolFilter
	}
	return nil
}

// / REQUESTS/RESPONSES
type CheckInitializedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckInitializedRequest) Reset() {
	*x = CheckInitializedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInitializedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInitializedRequest) ProtoMessage() {}

func (x *CheckInitializedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInitializedRequest.ProtoReflect.Descriptor instead.
func (*CheckInitializedRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{17}
}

type CheckInitializedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uuid   string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CheckInitializedResponse) Reset() {
	*x = CheckInitializedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInitializedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInitializedResponse) ProtoMessage() {}

func (x *CheckInitializedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInitializedResponse.ProtoReflect.Descriptor instead.
func (*CheckInitializedResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{18}
}

func (x *CheckInitializedResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckInitializedResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{19}
}

type InitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uuid   string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *InitializeResponse) Reset() {
	*x = InitializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse) ProtoMessage() {}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse.ProtoReflect.Descriptor instead.
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{20}
}

func (x *InitializeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InitializeResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientProtocol string `protobuf:"bytes,1,opt,name=client_protocol,json=clientProtocol,proto3" json:"client_protocol,omitempty"`
	ClientName     string `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion  string `protobuf:"bytes,3,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{21}
}

func (x *GetVersionRequest) GetClientProtocol() string {
	if x != nil {
		return x.ClientProtocol
	}
	return ""
}

func (x *GetVersionRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *GetVersionRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ServiceProtocol string  `protobuf:"bytes,2,opt,name=service_protocol,json=serviceProtocol,proto3" json:"service_protocol,omitempty"`
	ServiceVersion  string  `protobuf:"bytes,3,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{22}
}

func (x *GetVersionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetVersionResponse) GetServiceProtocol() string {
	if x != nil {
		return x.ServiceProtocol
	}
	return ""
}

func (x *GetVersionResponse) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

type ListInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInterfacesRequest) Reset() {
	*x = ListInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesRequest) ProtoMessage() {}

func (x *ListInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{23}
}

type ListInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Interfaces []*Interface `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *ListInterfacesResponse) Reset() {
	*x = ListInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesResponse) ProtoMessage() {}

func (x *ListInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{24}
}

func (x *ListInterfacesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListInterfacesResponse) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type GetInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *GetInterfaceRequest) Reset() {
	*x = GetInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceRequest) ProtoMessage() {}

func (x *GetInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceRequest.ProtoReflect.Descriptor instead.
func (*GetInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{25}
}

func (x *GetInterfaceRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type GetInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *GetInterfaceResponse) Reset() {
	*x = GetInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceResponse) ProtoMessage() {}

func (x *GetInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceResponse.ProtoReflect.Descriptor instead.
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{26}
}

func (x *GetInterfaceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetInterfaceResponse) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type CreateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define whether a Bare Metal Interface or a Virtual Interface is created.
	// Both instance types cannot be mixed during a session.
	// Maximum number of instantiated bare metal interfaces is 1.
	// Maximum number of Virtual Interfaces is not defined.
	InterfaceType InterfaceType `protobuf:"varint,1,opt,name=interface_type,json=interfaceType,proto3,enum=dpdkironcore.v1.InterfaceType" json:"interface_type,omitempty"`
	InterfaceId   []byte        `protobuf:"bytes,2,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Vni           uint32        `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Ipv4Config    *IpConfig     `protobuf:"bytes,4,opt,name=ipv4_config,json=ipv4Config,proto3" json:"ipv4_config,omitempty"`
	Ipv6Config    *IpConfig     `protobuf:"bytes,5,opt,name=ipv6_config,json=ipv6Config,proto3" json:"ipv6_config,omitempty"`
	PxeConfig     *PxeConfig    `protobuf:"bytes,6,opt,name=pxe_config,json=pxeConfig,proto3" json:"pxe_config,omitempty"`
	// Device with this name will be assigned if it exists, otherwise error is returned.
	DeviceName         string          `protobuf:"bytes,7,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	MeteringParameters *MeteringParams `protobuf:"bytes,8,opt,name=metering_parameters,json=meteringParameters,proto3" json:"metering_parameters,omitempty"`
}

func (x *CreateInterfaceRequest) Reset() {
	*x = CreateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceRequest) ProtoMessage() {}

func (x *CreateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{27}
}

func (x *CreateInterfaceRequest) GetInterfaceType() InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return InterfaceType_VIRTUAL
}

func (x *CreateInterfaceRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *CreateInterfaceRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateInterfaceRequest) GetIpv4Config() *IpConfig {
	if x != nil {
		return x.Ipv4Config
	}
	return nil
}

func (x *CreateInterfaceRequest) GetIpv6Config() *IpConfig {
	if x != nil {
		return x.Ipv6Config
	}
	return nil
}

func (x *CreateInterfaceRequest) GetPxeConfig() *PxeConfig {
	if x != nil {
		return x.PxeConfig
	}
	return nil
}

func (x *CreateInterfaceRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *CreateInterfaceRequest) GetMeteringParameters() *MeteringParams {
	if x != nil {
		return x.MeteringParameters
	}
	return nil
}

type CreateInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte           `protobuf:"bytes,2,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
	Vf            *VirtualFunction `protobuf:"bytes,3,opt,name=vf,proto3" json:"vf,omitempty"` // Holds VF information when a VM has been created.
}

func (x *CreateInterfaceResponse) Reset() {
	*x = CreateInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceResponse) ProtoMessage() {}

func (x *CreateInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceResponse.ProtoReflect.Descriptor instead.
func (*CreateInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{28}
}

func (x *CreateInterfaceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateInterfaceResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

func (x *CreateInterfaceResponse) GetVf() *VirtualFunction {
	if x != nil {
		return x.Vf
	}
	return nil
}

type DeleteInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *DeleteInterfaceRequest) Reset() {
	*x = DeleteInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceRequest) ProtoMessage() {}

func (x *DeleteInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteInterfaceRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type DeleteInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteInterfaceResponse) Reset() {
	*x = DeleteInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceResponse) ProtoMessage() {}

func (x *DeleteInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteInterfaceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListPrefixesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *ListPrefixesRequest) Reset() {
	*x = ListPrefixesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrefixesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrefixesRequest) ProtoMessage() {}

func (x *ListPrefixesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrefixesRequest.ProtoReflect.Descriptor instead.
func (*ListPrefixesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{31}
}

func (x *ListPrefixesRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type ListPrefixesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Prefixes []*Prefix `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *ListPrefixesResponse) Reset() {
	*x = ListPrefixesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrefixesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrefixesResponse) ProtoMessage() {}

func (x *ListPrefixesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrefixesResponse.ProtoReflect.Descriptor instead.
func (*ListPrefixesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{32}
}

func (x *ListPrefixesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListPrefixesResponse) GetPrefixes() []*Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type CreatePrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte  `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Prefix      *Prefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *CreatePrefixRequest) Reset() {
	*x = CreatePrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrefixRequest) ProtoMessage() {}

func (x *CreatePrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrefixRequest.ProtoReflect.Descriptor instead.
func (*CreatePrefixRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{33}
}

func (x *CreatePrefixRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *CreatePrefixRequest) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type CreatePrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *CreatePrefixResponse) Reset() {
	*x = CreatePrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrefixResponse) ProtoMessage() {}

func (x *CreatePrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrefixResponse.ProtoReflect.Descriptor instead.
func (*CreatePrefixResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{34}
}

func (x *CreatePrefixResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreatePrefixResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type DeletePrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte  `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Prefix      *Prefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *DeletePrefixRequest) Reset() {
	*x = DeletePrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrefixRequest) ProtoMessage() {}

func (x *DeletePrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrefixRequest.ProtoReflect.Descriptor instead.
func (*DeletePrefixRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{35}
}

func (x *DeletePrefixRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *DeletePrefixRequest) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type DeletePrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeletePrefixResponse) Reset() {
	*x = DeletePrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrefixResponse) ProtoMessage() {}

func (x *DeletePrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrefixResponse.ProtoReflect.Descriptor instead.
func (*DeletePrefixResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{36}
}

func (x *DeletePrefixResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListLoadBalancerPrefixesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *ListLoadBalancerPrefixesRequest) Reset() {
	*x = ListLoadBalancerPrefixesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoadBalancerPrefixesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoadBalancerPrefixesRequest) ProtoMessage() {}

func (x *ListLoadBalancerPrefixesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoadBalancerPrefixesRequest.ProtoReflect.Descriptor instead.
func (*ListLoadBalancerPrefixesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{37}
}

func (x *ListLoadBalancerPrefixesRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type ListLoadBalancerPrefixesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Prefixes []*Prefix `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *ListLoadBalancerPrefixesResponse) Reset() {
	*x = ListLoadBalancerPrefixesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoadBalancerPrefixesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoadBalancerPrefixesResponse) ProtoMessage() {}

func (x *ListLoadBalancerPrefixesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoadBalancerPrefixesResponse.ProtoReflect.Descriptor instead.
func (*ListLoadBalancerPrefixesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{38}
}

func (x *ListLoadBalancerPrefixesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListLoadBalancerPrefixesResponse) GetPrefixes() []*Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type CreateLoadBalancerPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte  `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Prefix      *Prefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *CreateLoadBalancerPrefixRequest) Reset() {
	*x = CreateLoadBalancerPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerPrefixRequest) ProtoMessage() {}

func (x *CreateLoadBalancerPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerPrefixRequest.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerPrefixRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{39}
}

func (x *CreateLoadBalancerPrefixRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *CreateLoadBalancerPrefixRequest) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type CreateLoadBalancerPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *CreateLoadBalancerPrefixResponse) Reset() {
	*x = CreateLoadBalancerPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerPrefixResponse) ProtoMessage() {}

func (x *CreateLoadBalancerPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerPrefixResponse.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerPrefixResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{40}
}

func (x *CreateLoadBalancerPrefixResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateLoadBalancerPrefixResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type DeleteLoadBalancerPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte  `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Prefix      *Prefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *DeleteLoadBalancerPrefixRequest) Reset() {
	*x = DeleteLoadBalancerPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerPrefixRequest) ProtoMessage() {}

func (x *DeleteLoadBalancerPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerPrefixRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerPrefixRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteLoadBalancerPrefixRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *DeleteLoadBalancerPrefixRequest) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type DeleteLoadBalancerPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteLoadBalancerPrefixResponse) Reset() {
	*x = DeleteLoadBalancerPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerPrefixResponse) ProtoMessage() {}

func (x *DeleteLoadBalancerPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerPrefixResponse.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerPrefixResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteLoadBalancerPrefixResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateVipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte     `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	VipIp       *IpAddress `protobuf:"bytes,2,opt,name=vip_ip,json=vipIp,proto3" json:"vip_ip,omitempty"`
}

func (x *CreateVipRequest) Reset() {
	*x = CreateVipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVipRequest) ProtoMessage() {}

func (x *CreateVipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVipRequest.ProtoReflect.Descriptor instead.
func (*CreateVipRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{43}
}

func (x *CreateVipRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *CreateVipRequest) GetVipIp() *IpAddress {
	if x != nil {
		return x.VipIp
	}
	return nil
}

type CreateVipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *CreateVipResponse) Reset() {
	*x = CreateVipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVipResponse) ProtoMessage() {}

func (x *CreateVipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVipResponse.ProtoReflect.Descriptor instead.
func (*CreateVipResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{44}
}

func (x *CreateVipResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateVipResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type GetVipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *GetVipRequest) Reset() {
	*x = GetVipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVipRequest) ProtoMessage() {}

func (x *GetVipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVipRequest.ProtoReflect.Descriptor instead.
func (*GetVipRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{45}
}

func (x *GetVipRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type GetVipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VipIp         *IpAddress `protobuf:"bytes,2,opt,name=vip_ip,json=vipIp,proto3" json:"vip_ip,omitempty"`
	UnderlayRoute []byte     `protobuf:"bytes,3,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *GetVipResponse) Reset() {
	*x = GetVipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVipResponse) ProtoMessage() {}

func (x *GetVipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVipResponse.ProtoReflect.Descriptor instead.
func (*GetVipResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{46}
}

func (x *GetVipResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetVipResponse) GetVipIp() *IpAddress {
	if x != nil {
		return x.VipIp
	}
	return nil
}

func (x *GetVipResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type DeleteVipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *DeleteVipRequest) Reset() {
	*x = DeleteVipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVipRequest) ProtoMessage() {}

func (x *DeleteVipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVipRequest.ProtoReflect.Descriptor instead.
func (*DeleteVipRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteVipRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type DeleteVipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteVipResponse) Reset() {
	*x = DeleteVipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVipResponse) ProtoMessage() {}

func (x *DeleteVipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVipResponse.ProtoReflect.Descriptor instead.
func (*DeleteVipResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteVipResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbalancerId    []byte     `protobuf:"bytes,1,opt,name=loadbalancer_id,json=loadbalancerId,proto3" json:"loadbalancer_id,omitempty"`
	LoadbalancedIp    *IpAddress `protobuf:"bytes,2,opt,name=loadbalanced_ip,json=loadbalancedIp,proto3" json:"loadbalanced_ip,omitempty"`
	Vni               uint32     `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	LoadbalancedPorts []*LbPort  `protobuf:"bytes,4,rep,name=loadbalanced_ports,json=loadbalancedPorts,proto3" json:"loadbalanced_ports,omitempty"`
}

func (x *CreateLoadBalancerRequest) Reset() {
	*x = CreateLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerRequest) ProtoMessage() {}

func (x *CreateLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{49}
}

func (x *CreateLoadBalancerRequest) GetLoadbalancerId() []byte {
	if x != nil {
		return x.LoadbalancerId
	}
	return nil
}

func (x *CreateLoadBalancerRequest) GetLoadbalancedIp() *IpAddress {
	if x != nil {
		return x.LoadbalancedIp
	}
	return nil
}

func (x *CreateLoadBalancerRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateLoadBalancerRequest) GetLoadbalancedPorts() []*LbPort {
	if x != nil {
		return x.LoadbalancedPorts
	}
	return nil
}

type CreateLoadBalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *CreateLoadBalancerResponse) Reset() {
	*x = CreateLoadBalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerResponse) ProtoMessage() {}

func (x *CreateLoadBalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerResponse.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{50}
}

func (x *CreateLoadBalancerResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateLoadBalancerResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type GetLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbalancerId []byte `protobuf:"bytes,1,opt,name=loadbalancer_id,json=loadbalancerId,proto3" json:"loadbalancer_id,omitempty"`
}

func (x *GetLoadBalancerRequest) Reset() {
	*x = GetLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerRequest) ProtoMessage() {}

func (x *GetLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{51}
}

func (x *GetLoadBalancerRequest) GetLoadbalancerId() []byte {
	if x != nil {
		return x.LoadbalancerId
	}
	return nil
}

type GetLoadBalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LoadbalancedIp    *IpAddress `protobuf:"bytes,2,opt,name=loadbalanced_ip,json=loadbalancedIp,proto3" json:"loadbalanced_ip,omitempty"`
	Vni               uint32     `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	LoadbalancedPorts []*LbPort  `protobuf:"bytes,4,rep,name=loadbalanced_ports,json=loadbalancedPorts,proto3" json:"loadbalanced_ports,omitempty"`
	UnderlayRoute     []byte     `protobuf:"bytes,5,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *GetLoadBalancerResponse) Reset() {
	*x = GetLoadBalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerResponse) ProtoMessage() {}

func (x *GetLoadBalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerResponse.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{52}
}

func (x *GetLoadBalancerResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLoadBalancerResponse) GetLoadbalancedIp() *IpAddress {
	if x != nil {
		return x.LoadbalancedIp
	}
	return nil
}

func (x *GetLoadBalancerResponse) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *GetLoadBalancerResponse) GetLoadbalancedPorts() []*LbPort {
	if x != nil {
		return x.LoadbalancedPorts
	}
	return nil
}

func (x *GetLoadBalancerResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type DeleteLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbalancerId []byte `protobuf:"bytes,1,opt,name=loadbalancer_id,json=loadbalancerId,proto3" json:"loadbalancer_id,omitempty"`
}

func (x *DeleteLoadBalancerRequest) Reset() {
	*x = DeleteLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerRequest) ProtoMessage() {}

func (x *DeleteLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteLoadBalancerRequest) GetLoadbalancerId() []byte {
	if x != nil {
		return x.LoadbalancerId
	}
	return nil
}

type DeleteLoadBalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteLoadBalancerResponse) Reset() {
	*x = DeleteLoadBalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerResponse) ProtoMessage() {}

func (x *DeleteLoadBalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerResponse.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteLoadBalancerResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateLoadBalancerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbalancerId []byte     `protobuf:"bytes,1,opt,name=loadbalancer_id,json=loadbalancerId,proto3" json:"loadbalancer_id,omitempty"`
	TargetIp       *IpAddress `protobuf:"bytes,2,opt,name=target_ip,json=targetIp,proto3" json:"target_ip,omitempty"`
}

func (x *CreateLoadBalancerTargetRequest) Reset() {
	*x = CreateLoadBalancerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerTargetRequest) ProtoMessage() {}

func (x *CreateLoadBalancerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerTargetRequest.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerTargetRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{55}
}

func (x *CreateLoadBalancerTargetRequest) GetLoadbalancerId() []byte {
	if x != nil {
		return x.LoadbalancerId
	}
	return nil
}

func (x *CreateLoadBalancerTargetRequest) GetTargetIp() *IpAddress {
	if x != nil {
		return x.TargetIp
	}
	return nil
}

type CreateLoadBalancerTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateLoadBalancerTargetResponse) Reset() {
	*x = CreateLoadBalancerTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerTargetResponse) ProtoMessage() {}

func (x *CreateLoadBalancerTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerTargetResponse.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerTargetResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{56}
}

func (x *CreateLoadBalancerTargetResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListLoadBalancerTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbalancerId []byte `protobuf:"bytes,1,opt,name=loadbalancer_id,json=loadbalancerId,proto3" json:"loadbalancer_id,omitempty"`
}

func (x *ListLoadBalancerTargetsRequest) Reset() {
	*x = ListLoadBalancerTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoadBalancerTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoadBalancerTargetsRequest) ProtoMessage() {}

func (x *ListLoadBalancerTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoadBalancerTargetsRequest.ProtoReflect.Descriptor instead.
func (*ListLoadBalancerTargetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{57}
}

func (x *ListLoadBalancerTargetsRequest) GetLoadbalancerId() []byte {
	if x != nil {
		return x.LoadbalancerId
	}
	return nil
}

type ListLoadBalancerTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TargetIps []*IpAddress `protobuf:"bytes,2,rep,name=target_ips,json=targetIps,proto3" json:"target_ips,omitempty"`
}

func (x *ListLoadBalancerTargetsResponse) Reset() {
	*x = ListLoadBalancerTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoadBalancerTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoadBalancerTargetsResponse) ProtoMessage() {}

func (x *ListLoadBalancerTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoadBalancerTargetsResponse.ProtoReflect.Descriptor instead.
func (*ListLoadBalancerTargetsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{58}
}

func (x *ListLoadBalancerTargetsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListLoadBalancerTargetsResponse) GetTargetIps() []*IpAddress {
	if x != nil {
		return x.TargetIps
	}
	return nil
}

type DeleteLoadBalancerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadbalancerId []byte     `protobuf:"bytes,1,opt,name=loadbalancer_id,json=loadbalancerId,proto3" json:"loadbalancer_id,omitempty"`
	TargetIp       *IpAddress `protobuf:"bytes,2,opt,name=target_ip,json=targetIp,proto3" json:"target_ip,omitempty"`
}

func (x *DeleteLoadBalancerTargetRequest) Reset() {
	*x = DeleteLoadBalancerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerTargetRequest) ProtoMessage() {}

func (x *DeleteLoadBalancerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerTargetRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteLoadBalancerTargetRequest) GetLoadbalancerId() []byte {
	if x != nil {
		return x.LoadbalancerId
	}
	return nil
}

func (x *DeleteLoadBalancerTargetRequest) GetTargetIp() *IpAddress {
	if x != nil {
		return x.TargetIp
	}
	return nil
}

type DeleteLoadBalancerTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteLoadBalancerTargetResponse) Reset() {
	*x = DeleteLoadBalancerTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerTargetResponse) ProtoMessage() {}

func (x *DeleteLoadBalancerTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerTargetResponse.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerTargetResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteLoadBalancerTargetResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateNatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte     `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	NatIp       *IpAddress `protobuf:"bytes,2,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
	MinPort     uint32     `protobuf:"varint,3,opt,name=min_port,json=minPort,proto3" json:"min_port,omitempty"` // port should be uint16 (less than 65536)
	MaxPort     uint32     `protobuf:"varint,4,opt,name=max_port,json=maxPort,proto3" json:"max_port,omitempty"`
}

func (x *CreateNatRequest) Reset() {
	*x = CreateNatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNatRequest) ProtoMessage() {}

func (x *CreateNatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNatRequest.ProtoReflect.Descriptor instead.
func (*CreateNatRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{61}
}

func (x *CreateNatRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *CreateNatRequest) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

func (x *CreateNatRequest) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *CreateNatRequest) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

type CreateNatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *CreateNatResponse) Reset() {
	*x = CreateNatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNatResponse) ProtoMessage() {}

func (x *CreateNatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNatResponse.ProtoReflect.Descriptor instead.
func (*CreateNatResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{62}
}

func (x *CreateNatResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateNatResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type GetNatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *GetNatRequest) Reset() {
	*x = GetNatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNatRequest) ProtoMessage() {}

func (x *GetNatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNatRequest.ProtoReflect.Descriptor instead.
func (*GetNatRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{63}
}

func (x *GetNatRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type GetNatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NatIp         *IpAddress `protobuf:"bytes,2,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
	MinPort       uint32     `protobuf:"varint,3,opt,name=min_port,json=minPort,proto3" json:"min_port,omitempty"` // port should be uint16 (less than 65536)
	MaxPort       uint32     `protobuf:"varint,4,opt,name=max_port,json=maxPort,proto3" json:"max_port,omitempty"`
	UnderlayRoute []byte     `protobuf:"bytes,5,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *GetNatResponse) Reset() {
	*x = GetNatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNatResponse) ProtoMessage() {}

func (x *GetNatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNatResponse.ProtoReflect.Descriptor instead.
func (*GetNatResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{64}
}

func (x *GetNatResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetNatResponse) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

func (x *GetNatResponse) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *GetNatResponse) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

func (x *GetNatResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type DeleteNatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *DeleteNatRequest) Reset() {
	*x = DeleteNatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNatRequest) ProtoMessage() {}

func (x *DeleteNatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNatRequest.ProtoReflect.Descriptor instead.
func (*DeleteNatRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteNatRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type DeleteNatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteNatResponse) Reset() {
	*x = DeleteNatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNatResponse) ProtoMessage() {}

func (x *DeleteNatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNatResponse.ProtoReflect.Descriptor instead.
func (*DeleteNatResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteNatResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateNeighborNatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatIp         *IpAddress `protobuf:"bytes,1,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
	Vni           uint32     `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	MinPort       uint32     `protobuf:"varint,3,opt,name=min_port,json=minPort,proto3" json:"min_port,omitempty"` // port should be uint16 (less than 65536)
	MaxPort       uint32     `protobuf:"varint,4,opt,name=max_port,json=maxPort,proto3" json:"max_port,omitempty"`
	UnderlayRoute []byte     `protobuf:"bytes,5,opt,name=underlay_route,json=underlayRoute,proto3" json:"underlay_route,omitempty"`
}

func (x *CreateNeighborNatRequest) Reset() {
	*x = CreateNeighborNatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNeighborNatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNeighborNatRequest) ProtoMessage() {}

func (x *CreateNeighborNatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNeighborNatRequest.ProtoReflect.Descriptor instead.
func (*CreateNeighborNatRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{67}
}

func (x *CreateNeighborNatRequest) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

func (x *CreateNeighborNatRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateNeighborNatRequest) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *CreateNeighborNatRequest) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

func (x *CreateNeighborNatRequest) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type CreateNeighborNatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateNeighborNatResponse) Reset() {
	*x = CreateNeighborNatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNeighborNatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNeighborNatResponse) ProtoMessage() {}

func (x *CreateNeighborNatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNeighborNatResponse.ProtoReflect.Descriptor instead.
func (*CreateNeighborNatResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{68}
}

func (x *CreateNeighborNatResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteNeighborNatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatIp   *IpAddress `protobuf:"bytes,1,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
	Vni     uint32     `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	MinPort uint32     `protobuf:"varint,3,opt,name=min_port,json=minPort,proto3" json:"min_port,omitempty"` // port should be uint16 (less than 65536)
	MaxPort uint32     `protobuf:"varint,4,opt,name=max_port,json=maxPort,proto3" json:"max_port,omitempty"`
}

func (x *DeleteNeighborNatRequest) Reset() {
	*x = DeleteNeighborNatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNeighborNatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNeighborNatRequest) ProtoMessage() {}

func (x *DeleteNeighborNatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNeighborNatRequest.ProtoReflect.Descriptor instead.
func (*DeleteNeighborNatRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteNeighborNatRequest) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

func (x *DeleteNeighborNatRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *DeleteNeighborNatRequest) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *DeleteNeighborNatRequest) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

type DeleteNeighborNatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteNeighborNatResponse) Reset() {
	*x = DeleteNeighborNatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNeighborNatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNeighborNatResponse) ProtoMessage() {}

func (x *DeleteNeighborNatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNeighborNatResponse.ProtoReflect.Descriptor instead.
func (*DeleteNeighborNatResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteNeighborNatResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListLocalNatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatIp *IpAddress `protobuf:"bytes,1,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
}

func (x *ListLocalNatsRequest) Reset() {
	*x = ListLocalNatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLocalNatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocalNatsRequest) ProtoMessage() {}

func (x *ListLocalNatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocalNatsRequest.ProtoReflect.Descriptor instead.
func (*ListLocalNatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{71}
}

func (x *ListLocalNatsRequest) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

type ListLocalNatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NatEntries []*NatEntry `protobuf:"bytes,2,rep,name=nat_entries,json=natEntries,proto3" json:"nat_entries,omitempty"`
}

func (x *ListLocalNatsResponse) Reset() {
	*x = ListLocalNatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLocalNatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocalNatsResponse) ProtoMessage() {}

func (x *ListLocalNatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocalNatsResponse.ProtoReflect.Descriptor instead.
func (*ListLocalNatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{72}
}

func (x *ListLocalNatsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListLocalNatsResponse) GetNatEntries() []*NatEntry {
	if x != nil {
		return x.NatEntries
	}
	return nil
}

type ListNeighborNatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatIp *IpAddress `protobuf:"bytes,1,opt,name=nat_ip,json=natIp,proto3" json:"nat_ip,omitempty"`
}

func (x *ListNeighborNatsRequest) Reset() {
	*x = ListNeighborNatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNeighborNatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNeighborNatsRequest) ProtoMessage() {}

func (x *ListNeighborNatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNeighborNatsRequest.ProtoReflect.Descriptor instead.
func (*ListNeighborNatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{73}
}

func (x *ListNeighborNatsRequest) GetNatIp() *IpAddress {
	if x != nil {
		return x.NatIp
	}
	return nil
}

type ListNeighborNatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NatEntries []*NatEntry `protobuf:"bytes,2,rep,name=nat_entries,json=natEntries,proto3" json:"nat_entries,omitempty"`
}

func (x *ListNeighborNatsResponse) Reset() {
	*x = ListNeighborNatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNeighborNatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNeighborNatsResponse) ProtoMessage() {}

func (x *ListNeighborNatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNeighborNatsResponse.ProtoReflect.Descriptor instead.
func (*ListNeighborNatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{74}
}

func (x *ListNeighborNatsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListNeighborNatsResponse) GetNatEntries() []*NatEntry {
	if x != nil {
		return x.NatEntries
	}
	return nil
}

type ListRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni uint32 `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *ListRoutesRequest) Reset() {
	*x = ListRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesRequest) ProtoMessage() {}

func (x *ListRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{75}
}

func (x *ListRoutesRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

type ListRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Routes []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{76}
}

func (x *ListRoutesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListRoutesResponse) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type CreateRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni   uint32 `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Route *Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *CreateRouteRequest) Reset() {
	*x = CreateRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteRequest) ProtoMessage() {}

func (x *CreateRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteRequest.ProtoReflect.Descriptor instead.
func (*CreateRouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{77}
}

func (x *CreateRouteRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type CreateRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateRouteResponse) Reset() {
	*x = CreateRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteResponse) ProtoMessage() {}

func (x *CreateRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteResponse.ProtoReflect.Descriptor instead.
func (*CreateRouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{78}
}

func (x *CreateRouteResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni   uint32 `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Route *Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteRouteRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *DeleteRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type DeleteRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteRouteResponse) Reset() {
	*x = DeleteRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteResponse) ProtoMessage() {}

func (x *DeleteRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteResponse.ProtoReflect.Descriptor instead.
func (*DeleteRouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{80}
}

func (x *DeleteRouteResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CheckVniInUseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni  uint32  `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Type VniType `protobuf:"varint,2,opt,name=type,proto3,enum=dpdkironcore.v1.VniType" json:"type,omitempty"`
}

func (x *CheckVniInUseRequest) Reset() {
	*x = CheckVniInUseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVniInUseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVniInUseRequest) ProtoMessage() {}

func (x *CheckVniInUseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVniInUseRequest.ProtoReflect.Descriptor instead.
func (*CheckVniInUseRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{81}
}

func (x *CheckVniInUseRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CheckVniInUseRequest) GetType() VniType {
	if x != nil {
		return x.Type
	}
	return VniType_VNI_IPV4
}

type CheckVniInUseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	InUse  bool    `protobuf:"varint,2,opt,name=in_use,json=inUse,proto3" json:"in_use,omitempty"`
}

func (x *CheckVniInUseResponse) Reset() {
	*x = CheckVniInUseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVniInUseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVniInUseResponse) ProtoMessage() {}

func (x *CheckVniInUseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVniInUseResponse.ProtoReflect.Descriptor instead.
func (*CheckVniInUseResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{82}
}

func (x *CheckVniInUseResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckVniInUseResponse) GetInUse() bool {
	if x != nil {
		return x.InUse
	}
	return false
}

type ResetVniRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni  uint32  `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Type VniType `protobuf:"varint,2,opt,name=type,proto3,enum=dpdkironcore.v1.VniType" json:"type,omitempty"`
}

func (x *ResetVniRequest) Reset() {
	*x = ResetVniRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetVniRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVniRequest) ProtoMessage() {}

func (x *ResetVniRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVniRequest.ProtoReflect.Descriptor instead.
func (*ResetVniRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{83}
}

func (x *ResetVniRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *ResetVniRequest) GetType() VniType {
	if x != nil {
		return x.Type
	}
	return VniType_VNI_IPV4
}

type ResetVniResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ResetVniResponse) Reset() {
	*x = ResetVniResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetVniResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVniResponse) ProtoMessage() {}

func (x *ResetVniResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVniResponse.ProtoReflect.Descriptor instead.
func (*ResetVniResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{84}
}

func (x *ResetVniResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListFirewallRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *ListFirewallRulesRequest) Reset() {
	*x = ListFirewallRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFirewallRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirewallRulesRequest) ProtoMessage() {}

func (x *ListFirewallRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirewallRulesRequest.ProtoReflect.Descriptor instead.
func (*ListFirewallRulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{85}
}

func (x *ListFirewallRulesRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type ListFirewallRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Rules  []*FirewallRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListFirewallRulesResponse) Reset() {
	*x = ListFirewallRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFirewallRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirewallRulesResponse) ProtoMessage() {}

func (x *ListFirewallRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirewallRulesResponse.ProtoReflect.Descriptor instead.
func (*ListFirewallRulesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{86}
}

func (x *ListFirewallRulesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListFirewallRulesResponse) GetRules() []*FirewallRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type CreateFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte        `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	Rule        *FirewallRule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *CreateFirewallRuleRequest) Reset() {
	*x = CreateFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFirewallRuleRequest) ProtoMessage() {}

func (x *CreateFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{87}
}

func (x *CreateFirewallRuleRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *CreateFirewallRuleRequest) GetRule() *FirewallRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type CreateFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RuleId []byte  `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *CreateFirewallRuleResponse) Reset() {
	*x = CreateFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFirewallRuleResponse) ProtoMessage() {}

func (x *CreateFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{88}
}

func (x *CreateFirewallRuleResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateFirewallRuleResponse) GetRuleId() []byte {
	if x != nil {
		return x.RuleId
	}
	return nil
}

type GetFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	RuleId      []byte `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *GetFirewallRuleRequest) Reset() {
	*x = GetFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallRuleRequest) ProtoMessage() {}

func (x *GetFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*GetFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{89}
}

func (x *GetFirewallRuleRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *GetFirewallRuleRequest) GetRuleId() []byte {
	if x != nil {
		return x.RuleId
	}
	return nil
}

type GetFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Rule   *FirewallRule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *GetFirewallRuleResponse) Reset() {
	*x = GetFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallRuleResponse) ProtoMessage() {}

func (x *GetFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*GetFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{90}
}

func (x *GetFirewallRuleResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetFirewallRuleResponse) GetRule() *FirewallRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type DeleteFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId []byte `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	RuleId      []byte `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *DeleteFirewallRuleRequest) Reset() {
	*x = DeleteFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallRuleRequest) ProtoMessage() {}

func (x *DeleteFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteFirewallRuleRequest) GetInterfaceId() []byte {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *DeleteFirewallRuleRequest) GetRuleId() []byte {
	if x != nil {
		return x.RuleId
	}
	return nil
}

type DeleteFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteFirewallRuleResponse) Reset() {
	*x = DeleteFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallRuleResponse) ProtoMessage() {}

func (x *DeleteFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{92}
}

func (x *DeleteFirewallRuleResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CapturedInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType CaptureInterfaceType `protobuf:"varint,1,opt,name=interface_type,json=interfaceType,proto3,enum=dpdkironcore.v1.CaptureInterfaceType" json:"interface_type,omitempty"`
	Filter        []byte               `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Types that are assignable to Spec:
	//
	//	*CapturedInterface_VfName
	//	*CapturedInterface_PfIndex
	Spec isCapturedInterface_Spec `protobuf_oneof:"spec"`
}

func (x *CapturedInterface) Reset() {
	*x = CapturedInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapturedInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapturedInterface) ProtoMessage() {}

func (x *CapturedInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapturedInterface.ProtoReflect.Descriptor instead.
func (*CapturedInterface) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{93}
}

func (x *CapturedInterface) GetInterfaceType() CaptureInterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return CaptureInterfaceType_SINGLE_PF
}

func (x *CapturedInterface) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (m *CapturedInterface) GetSpec() isCapturedInterface_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *CapturedInterface) GetVfName() []byte {
	if x, ok := x.GetSpec().(*CapturedInterface_VfName); ok {
		return x.VfName
	}
	return nil
}

func (x *CapturedInterface) GetPfIndex() uint32 {
	if x, ok := x.GetSpec().(*CapturedInterface_PfIndex); ok {
		return x.PfIndex
	}
	return 0
}

type isCapturedInterface_Spec interface {
	isCapturedInterface_Spec()
}

type CapturedInterface_VfName struct {
	VfName []byte `protobuf:"bytes,3,opt,name=vf_name,json=vfName,proto3,oneof"`
}

type CapturedInterface_PfIndex struct {
	PfIndex uint32 `protobuf:"varint,4,opt,name=pf_index,json=pfIndex,proto3,oneof"`
}

func (*CapturedInterface_VfName) isCapturedInterface_Spec() {}

func (*CapturedInterface_PfIndex) isCapturedInterface_Spec() {}

type CaptureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinkNodeIp *IpAddress           `protobuf:"bytes,1,opt,name=sink_node_ip,json=sinkNodeIp,proto3" json:"sink_node_ip,omitempty"`
	UdpSrcPort uint32               `protobuf:"varint,2,opt,name=udp_src_port,json=udpSrcPort,proto3" json:"udp_src_port,omitempty"`
	UdpDstPort uint32               `protobuf:"varint,3,opt,name=udp_dst_port,json=udpDstPort,proto3" json:"udp_dst_port,omitempty"`
	Interfaces []*CapturedInterface `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *CaptureConfig) Reset() {
	*x = CaptureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureConfig) ProtoMessage() {}

func (x *CaptureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureConfig.ProtoReflect.Descriptor instead.
func (*CaptureConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{94}
}

func (x *CaptureConfig) GetSinkNodeIp() *IpAddress {
	if x != nil {
		return x.SinkNodeIp
	}
	return nil
}

func (x *CaptureConfig) GetUdpSrcPort() uint32 {
	if x != nil {
		return x.UdpSrcPort
	}
	return 0
}

func (x *CaptureConfig) GetUdpDstPort() uint32 {
	if x != nil {
		return x.UdpDstPort
	}
	return 0
}

func (x *CaptureConfig) GetInterfaces() []*CapturedInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type CaptureStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureConfig *CaptureConfig `protobuf:"bytes,1,opt,name=capture_config,json=captureConfig,proto3" json:"capture_config,omitempty"`
}

func (x *CaptureStartRequest) Reset() {
	*x = CaptureStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStartRequest) ProtoMessage() {}

func (x *CaptureStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStartRequest.ProtoReflect.Descriptor instead.
func (*CaptureStartRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{95}
}

func (x *CaptureStartRequest) GetCaptureConfig() *CaptureConfig {
	if x != nil {
		return x.CaptureConfig
	}
	return nil
}

type CaptureStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CaptureStartResponse) Reset() {
	*x = CaptureStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStartResponse) ProtoMessage() {}

func (x *CaptureStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStartResponse.ProtoReflect.Descriptor instead.
func (*CaptureStartResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{96}
}

func (x *CaptureStartResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CaptureStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptureStopRequest) Reset() {
	*x = CaptureStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStopRequest) ProtoMessage() {}

func (x *CaptureStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStopRequest.ProtoReflect.Descriptor instead.
func (*CaptureStopRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{97}
}

type CaptureStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StoppedInterfaceCnt uint32  `protobuf:"varint,2,opt,name=stopped_interface_cnt,json=stoppedInterfaceCnt,proto3" json:"stopped_interface_cnt,omitempty"`
}

func (x *CaptureStopResponse) Reset() {
	*x = CaptureStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStopResponse) ProtoMessage() {}

func (x *CaptureStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStopResponse.ProtoReflect.Descriptor instead.
func (*CaptureStopResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{98}
}

func (x *CaptureStopResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CaptureStopResponse) GetStoppedInterfaceCnt() uint32 {
	if x != nil {
		return x.StoppedInterfaceCnt
	}
	return 0
}

type CaptureStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptureStatusRequest) Reset() {
	*x = CaptureStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStatusRequest) ProtoMessage() {}

func (x *CaptureStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStatusRequest.ProtoReflect.Descriptor instead.
func (*CaptureStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{99}
}

type CaptureStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsActive      bool           `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CaptureConfig *CaptureConfig `protobuf:"bytes,3,opt,name=capture_config,json=captureConfig,proto3" json:"capture_config,omitempty"`
}

func (x *CaptureStatusResponse) Reset() {
	*x = CaptureStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStatusResponse) ProtoMessage() {}

func (x *CaptureStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStatusResponse.ProtoReflect.Descriptor instead.
func (*CaptureStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{100}
}

func (x *CaptureStatusResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CaptureStatusResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CaptureStatusResponse) GetCaptureConfig() *CaptureConfig {
	if x != nil {
		return x.CaptureConfig
	}
	return nil
}

var File_proto_dpdk_proto protoreflect.FileDescriptor

var file_proto_dpdk_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x70, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x70, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x70,
	0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x73, 0x0a,
	0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76,
	0x6e, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x70, 0x76, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x70, 0x76, 0x36, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x63, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x63, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x33, 0x0a, 0x08, 0x49, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x51, 0x0a, 0x09, 0x50, 0x78, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x0f, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x06,
	0x4c, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x06, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6e, 0x61, 0x74, 0x49,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x22, 0xb6, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x56, 0x6e, 0x69, 0x12, 0x43, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x46, 0x0a, 0x0a, 0x49, 0x63, 0x6d,
	0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x55, 0x64, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x22, 0xad, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x63, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x63, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x63, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03,
	0x74, 0x63, 0x70, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x64, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x50, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x84, 0x03, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x46, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x48, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5f, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x3a, 0x0a, 0x0b, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x76,
	0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x78, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x78, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x70, 0x78, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x50, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x12, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x76, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x76, 0x66, 0x22, 0x3b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x38, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0x6e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x47,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0x7a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x53, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x76, 0x69, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x69, 0x70, 0x49,
	0x70, 0x22, 0x6b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x32,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x69, 0x70, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x05, 0x76, 0x69, 0x70, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x22, 0x35, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe3, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c,
	0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x46, 0x0a, 0x12, 0x6c,
	0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x62, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e,
	0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x12, 0x46, 0x0a, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x62, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22,
	0x44, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x22, 0x53, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x49, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70,
	0x22, 0x53, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x06, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6e, 0x61, 0x74, 0x49, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x22, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6e,
	0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6e, 0x61, 0x74, 0x49, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x05, 0x6e, 0x61, 0x74, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05,
	0x6e, 0x61, 0x74, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x4c, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x05, 0x6e, 0x61, 0x74, 0x49, 0x70, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4c, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6e, 0x61, 0x74, 0x49, 0x70, 0x22, 0x87, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x61, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x22, 0x75, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x2c, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x54, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x56, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x56, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6e,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x54,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x11,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x76, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x70, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x69, 0x6e,
	0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x6e,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75,
	0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x64, 0x70,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x75, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x5c, 0x0a, 0x13, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a,
	0x14, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x13,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xac, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a,
	0x2b, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x09,
	0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56,
	0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x2a, 0x4c, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x44, 0x50, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x56, 0x36, 0x10, 0x3a,
	0x12, 0x09, 0x0a, 0x04, 0x53, 0x43, 0x54, 0x50, 0x10, 0x84, 0x01, 0x2a, 0x2b, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52,
	0x4f, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01,
	0x2a, 0x33, 0x0a, 0x07, 0x56, 0x6e, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x56,
	0x4e, 0x49, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x4e, 0x49,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x4e, 0x49, 0x5f, 0x42,
	0x4f, 0x54, 0x48, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x46, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x56, 0x46, 0x10, 0x01, 0x32, 0xf0, 0x20, 0x0a, 0x0c,
	0x44, 0x50, 0x44, 0x4b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x69, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x28, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x24,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x27, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x30, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x30, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x70, 0x12, 0x21, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x12, 0x1e, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x69, 0x70, 0x12, 0x21, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x2a,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69,
	0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x12, 0x21,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x74, 0x12, 0x1e, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x74, 0x12, 0x21, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61,
	0x74, 0x12, 0x29, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x12,
	0x29, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6e, 0x69,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6e, 0x69,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56,
	0x6e, 0x69, 0x12, 0x20, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x24, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x69, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x64, 0x70, 0x64, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dpdk_proto_rawDescOnce sync.Once
	file_proto_dpdk_proto_rawDescData = file_proto_dpdk_proto_rawDesc
)

func file_proto_dpdk_proto_rawDescGZIP() []byte {
	file_proto_dpdk_proto_rawDescOnce.Do(func() {
		file_proto_dpdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dpdk_proto_rawDescData)
	})
	return file_proto_dpdk_proto_rawDescData
}

var file_proto_dpdk_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_dpdk_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_proto_dpdk_proto_goTypes = []interface{}{
	(InterfaceType)(0),                       // 0: dpdkironcore.v1.InterfaceType
	(IpVersion)(0),                           // 1: dpdkironcore.v1.IpVersion
	(Protocol)(0),                            // 2: dpdkironcore.v1.Protocol
	(TrafficDirection)(0),                    // 3: dpdkironcore.v1.TrafficDirection
	(FirewallAction)(0),                      // 4: dpdkironcore.v1.FirewallAction
	(VniType)(0),                             // 5: dpdkironcore.v1.VniType
	(CaptureInterfaceType)(0),                // 6: dpdkironcore.v1.CaptureInterfaceType
	(*Empty)(nil),                            // 7: dpdkironcore.v1.Empty
	(*Status)(nil),                           // 8: dpdkironcore.v1.Status
	(*IpAddress)(nil),                        // 9: dpdkironcore.v1.IpAddress
	(*Prefix)(nil),                           // 10: dpdkironcore.v1.Prefix
	(*Interface)(nil),                        // 11: dpdkironcore.v1.Interface
	(*IpConfig)(nil),                         // 12: dpdkironcore.v1.IpConfig
	(*PxeConfig)(nil),                        // 13: dpdkironcore.v1.PxeConfig
	(*VirtualFunction)(nil),                  // 14: dpdkironcore.v1.VirtualFunction
	(*LbPort)(nil),                           // 15: dpdkironcore.v1.LbPort
	(*NatEntry)(nil),                         // 16: dpdkironcore.v1.NatEntry
	(*Route)(nil),                            // 17: dpdkironcore.v1.Route
	(*IcmpFilter)(nil),                       // 18: dpdkironcore.v1.IcmpFilter
	(*TcpFilter)(nil),                        // 19: dpdkironcore.v1.TcpFilter
	(*UdpFilter)(nil),                        // 20: dpdkironcore.v1.UdpFilter
	(*ProtocolFilter)(nil),                   // 21: dpdkironcore.v1.ProtocolFilter
	(*MeteringParams)(nil),                   // 22: dpdkironcore.v1.MeteringParams
	(*FirewallRule)(nil),                     // 23: dpdkironcore.v1.FirewallRule
	(*CheckInitializedRequest)(nil),          // 24: dpdkironcore.v1.CheckInitializedRequest
	(*CheckInitializedResponse)(nil),         // 25: dpdkironcore.v1.CheckInitializedResponse
	(*InitializeRequest)(nil),                // 26: dpdkironcore.v1.InitializeRequest
	(*InitializeResponse)(nil),               // 27: dpdkironcore.v1.InitializeResponse
	(*GetVersionRequest)(nil),                // 28: dpdkironcore.v1.GetVersionRequest
	(*GetVersionResponse)(nil),               // 29: dpdkironcore.v1.GetVersionResponse
	(*ListInterfacesRequest)(nil),            // 30: dpdkironcore.v1.ListInterfacesRequest
	(*ListInterfacesResponse)(nil),           // 31: dpdkironcore.v1.ListInterfacesResponse
	(*GetInterfaceRequest)(nil),              // 32: dpdkironcore.v1.GetInterfaceRequest
	(*GetInterfaceResponse)(nil),             // 33: dpdkironcore.v1.GetInterfaceResponse
	(*CreateInterfaceRequest)(nil),           // 34: dpdkironcore.v1.CreateInterfaceRequest
	(*CreateInterfaceResponse)(nil),          // 35: dpdkironcore.v1.CreateInterfaceResponse
	(*DeleteInterfaceRequest)(nil),           // 36: dpdkironcore.v1.DeleteInterfaceRequest
	(*DeleteInterfaceResponse)(nil),          // 37: dpdkironcore.v1.DeleteInterfaceResponse
	(*ListPrefixesRequest)(nil),              // 38: dpdkironcore.v1.ListPrefixesRequest
	(*ListPrefixesResponse)(nil),             // 39: dpdkironcore.v1.ListPrefixesResponse
	(*CreatePrefixRequest)(nil),              // 40: dpdkironcore.v1.CreatePrefixRequest
	(*CreatePrefixResponse)(nil),             // 41: dpdkironcore.v1.CreatePrefixResponse
	(*DeletePrefixRequest)(nil),              // 42: dpdkironcore.v1.DeletePrefixRequest
	(*DeletePrefixResponse)(nil),             // 43: dpdkironcore.v1.DeletePrefixResponse
	(*ListLoadBalancerPrefixesRequest)(nil),  // 44: dpdkironcore.v1.ListLoadBalancerPrefixesRequest
	(*ListLoadBalancerPrefixesResponse)(nil), // 45: dpdkironcore.v1.ListLoadBalancerPrefixesResponse
	(*CreateLoadBalancerPrefixRequest)(nil),  // 46: dpdkironcore.v1.CreateLoadBalancerPrefixRequest
	(*CreateLoadBalancerPrefixResponse)(nil), // 47: dpdkironcore.v1.CreateLoadBalancerPrefixResponse
	(*DeleteLoadBalancerPrefixRequest)(nil),  // 48: dpdkironcore.v1.DeleteLoadBalancerPrefixRequest
	(*DeleteLoadBalancerPrefixResponse)(nil), // 49: dpdkironcore.v1.DeleteLoadBalancerPrefixResponse
	(*CreateVipRequest)(nil),                 // 50: dpdkironcore.v1.CreateVipRequest
	(*CreateVipResponse)(nil),                // 51: dpdkironcore.v1.CreateVipResponse
	(*GetVipRequest)(nil),                    // 52: dpdkironcore.v1.GetVipRequest
	(*GetVipResponse)(nil),                   // 53: dpdkironcore.v1.GetVipResponse
	(*DeleteVipRequest)(nil),                 // 54: dpdkironcore.v1.DeleteVipRequest
	(*DeleteVipResponse)(nil),                // 55: dpdkironcore.v1.DeleteVipResponse
	(*CreateLoadBalancerRequest)(nil),        // 56: dpdkironcore.v1.CreateLoadBalancerRequest
	(*CreateLoadBalancerResponse)(nil),       // 57: dpdkironcore.v1.CreateLoadBalancerResponse
	(*GetLoadBalancerRequest)(nil),           // 58: dpdkironcore.v1.GetLoadBalancerRequest
	(*GetLoadBalancerResponse)(nil),          // 59: dpdkironcore.v1.GetLoadBalancerResponse
	(*DeleteLoadBalancerRequest)(nil),        // 60: dpdkironcore.v1.DeleteLoadBalancerRequest
	(*DeleteLoadBalancerResponse)(nil),       // 61: dpdkironcore.v1.DeleteLoadBalancerResponse
	(*CreateLoadBalancerTargetRequest)(nil),  // 62: dpdkironcore.v1.CreateLoadBalancerTargetRequest
	(*CreateLoadBalancerTargetResponse)(nil), // 63: dpdkironcore.v1.CreateLoadBalancerTargetResponse
	(*ListLoadBalancerTargetsRequest)(nil),   // 64: dpdkironcore.v1.ListLoadBalancerTargetsRequest
	(*ListLoadBalancerTargetsResponse)(nil),  // 65: dpdkironcore.v1.ListLoadBalancerTargetsResponse
	(*DeleteLoadBalancerTargetRequest)(nil),  // 66: dpdkironcore.v1.DeleteLoadBalancerTargetRequest
	(*DeleteLoadBalancerTargetResponse)(nil), // 67: dpdkironcore.v1.DeleteLoadBalancerTargetResponse
	(*CreateNatRequest)(nil),                 // 68: dpdkironcore.v1.CreateNatRequest
	(*CreateNatResponse)(nil),                // 69: dpdkironcore.v1.CreateNatResponse
	(*GetNatRequest)(nil),                    // 70: dpdkironcore.v1.GetNatRequest
	(*GetNatResponse)(nil),                   // 71: dpdkironcore.v1.GetNatResponse
	(*DeleteNatRequest)(nil),                 // 72: dpdkironcore.v1.DeleteNatRequest
	(*DeleteNatResponse)(nil),                // 73: dpdkironcore.v1.DeleteNatResponse
	(*CreateNeighborNatRequest)(nil),         // 74: dpdkironcore.v1.CreateNeighborNatRequest
	(*CreateNeighborNatResponse)(nil),        // 75: dpdkironcore.v1.CreateNeighborNatResponse
	(*DeleteNeighborNatRequest)(nil),         // 76: dpdkironcore.v1.DeleteNeighborNatRequest
	(*DeleteNeighborNatResponse)(nil),        // 77: dpdkironcore.v1.DeleteNeighborNatResponse
	(*ListLocalNatsRequest)(nil),             // 78: dpdkironcore.v1.ListLocalNatsRequest
	(*ListLocalNatsResponse)(nil),            // 79: dpdkironcore.v1.ListLocalNatsResponse
	(*ListNeighborNatsRequest)(nil),          // 80: dpdkironcore.v1.ListNeighborNatsRequest
	(*ListNeighborNatsResponse)(nil),         // 81: dpdkironcore.v1.ListNeighborNatsResponse
	(*ListRoutesRequest)(nil),                // 82: dpdkironcore.v1.ListRoutesRequest
	(*ListRoutesResponse)(nil),               // 83: dpdkironcore.v1.ListRoutesResponse
	(*CreateRouteRequest)(nil),               // 84: dpdkironcore.v1.CreateRouteRequest
	(*CreateRouteResponse)(nil),              // 85: dpdkironcore.v1.CreateRouteResponse
	(*DeleteRouteRequest)(nil),               // 86: dpdkironcore.v1.DeleteRouteRequest
	(*DeleteRouteResponse)(nil),              // 87: dpdkironcore.v1.DeleteRouteResponse
	(*CheckVniInUseRequest)(nil),             // 88: dpdkironcore.v1.CheckVniInUseRequest
	(*CheckVniInUseResponse)(nil),            // 89: dpdkironcore.v1.CheckVniInUseResponse
	(*ResetVniRequest)(nil),                  // 90: dpdkironcore.v1.ResetVniRequest
	(*ResetVniResponse)(nil),                 // 91: dpdkironcore.v1.ResetVniResponse
	(*ListFirewallRulesRequest)(nil),         // 92: dpdkironcore.v1.ListFirewallRulesRequest
	(*ListFirewallRulesResponse)(nil),        // 93: dpdkironcore.v1.ListFirewallRulesResponse
	(*CreateFirewallRuleRequest)(nil),        // 94: dpdkironcore.v1.CreateFirewallRuleRequest
	(*CreateFirewallRuleResponse)(nil),       // 95: dpdkironcore.v1.CreateFirewallRuleResponse
	(*GetFirewallRuleRequest)(nil),           // 96: dpdkironcore.v1.GetFirewallRuleRequest
	(*GetFirewallRuleResponse)(nil),          // 97: dpdkironcore.v1.GetFirewallRuleResponse
	(*DeleteFirewallRuleRequest)(nil),        // 98: dpdkironcore.v1.DeleteFirewallRuleRequest
	(*DeleteFirewallRuleResponse)(nil),       // 99: dpdkironcore.v1.DeleteFirewallRuleResponse
	(*CapturedInterface)(nil),                // 100: dpdkironcore.v1.CapturedInterface
	(*CaptureConfig)(nil),                    // 101: dpdkironcore.v1.CaptureConfig
	(*CaptureStartRequest)(nil),              // 102: dpdkironcore.v1.CaptureStartRequest
	(*CaptureStartResponse)(nil),             // 103: dpdkironcore.v1.CaptureStartResponse
	(*CaptureStopRequest)(nil),               // 104: dpdkironcore.v1.CaptureStopRequest
	(*CaptureStopResponse)(nil),              // 105: dpdkironcore.v1.CaptureStopResponse
	(*CaptureStatusRequest)(nil),             // 106: dpdkironcore.v1.CaptureStatusRequest
	(*CaptureStatusResponse)(nil),            // 107: dpdkironcore.v1.CaptureStatusResponse
}
var file_proto_dpdk_proto_depIdxs = []int32{
	1,   // 0: dpdkironcore.v1.IpAddress.ipver:type_name -> dpdkironcore.v1.IpVersion
	9,   // 1: dpdkironcore.v1.Prefix.ip:type_name -> dpdkironcore.v1.IpAddress
	22,  // 2: dpdkironcore.v1.Interface.meteringParams:type_name -> dpdkironcore.v1.MeteringParams
	2,   // 3: dpdkironcore.v1.LbPort.protocol:type_name -> dpdkironcore.v1.Protocol
	9,   // 4: dpdkironcore.v1.NatEntry.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	10,  // 5: dpdkironcore.v1.Route.prefix:type_name -> dpdkironcore.v1.Prefix
	9,   // 6: dpdkironcore.v1.Route.nexthop_address:type_name -> dpdkironcore.v1.IpAddress
	18,  // 7: dpdkironcore.v1.ProtocolFilter.icmp:type_name -> dpdkironcore.v1.IcmpFilter
	19,  // 8: dpdkironcore.v1.ProtocolFilter.tcp:type_name -> dpdkironcore.v1.TcpFilter
	20,  // 9: dpdkironcore.v1.ProtocolFilter.udp:type_name -> dpdkironcore.v1.UdpFilter
	3,   // 10: dpdkironcore.v1.FirewallRule.direction:type_name -> dpdkironcore.v1.TrafficDirection
	4,   // 11: dpdkironcore.v1.FirewallRule.action:type_name -> dpdkironcore.v1.FirewallAction
	10,  // 12: dpdkironcore.v1.FirewallRule.source_prefix:type_name -> dpdkironcore.v1.Prefix
	10,  // 13: dpdkironcore.v1.FirewallRule.destination_prefix:type_name -> dpdkironcore.v1.Prefix
	21,  // 14: dpdkironcore.v1.FirewallRule.protocol_filter:type_name -> dpdkironcore.v1.ProtocolFilter
	8,   // 15: dpdkironcore.v1.CheckInitializedResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 16: dpdkironcore.v1.InitializeResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 17: dpdkironcore.v1.GetVersionResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 18: dpdkironcore.v1.ListInterfacesResponse.status:type_name -> dpdkironcore.v1.Status
	11,  // 19: dpdkironcore.v1.ListInterfacesResponse.interfaces:type_name -> dpdkironcore.v1.Interface
	8,   // 20: dpdkironcore.v1.GetInterfaceResponse.status:type_name -> dpdkironcore.v1.Status
	11,  // 21: dpdkironcore.v1.GetInterfaceResponse.interface:type_name -> dpdkironcore.v1.Interface
	0,   // 22: dpdkironcore.v1.CreateInterfaceRequest.interface_type:type_name -> dpdkironcore.v1.InterfaceType
	12,  // 23: dpdkironcore.v1.CreateInterfaceRequest.ipv4_config:type_name -> dpdkironcore.v1.IpConfig
	12,  // 24: dpdkironcore.v1.CreateInterfaceRequest.ipv6_config:type_name -> dpdkironcore.v1.IpConfig
	13,  // 25: dpdkironcore.v1.CreateInterfaceRequest.pxe_config:type_name -> dpdkironcore.v1.PxeConfig
	22,  // 26: dpdkironcore.v1.CreateInterfaceRequest.metering_parameters:type_name -> dpdkironcore.v1.MeteringParams
	8,   // 27: dpdkironcore.v1.CreateInterfaceResponse.status:type_name -> dpdkironcore.v1.Status
	14,  // 28: dpdkironcore.v1.CreateInterfaceResponse.vf:type_name -> dpdkironcore.v1.VirtualFunction
	8,   // 29: dpdkironcore.v1.DeleteInterfaceResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 30: dpdkironcore.v1.ListPrefixesResponse.status:type_name -> dpdkironcore.v1.Status
	10,  // 31: dpdkironcore.v1.ListPrefixesResponse.prefixes:type_name -> dpdkironcore.v1.Prefix
	10,  // 32: dpdkironcore.v1.CreatePrefixRequest.prefix:type_name -> dpdkironcore.v1.Prefix
	8,   // 33: dpdkironcore.v1.CreatePrefixResponse.status:type_name -> dpdkironcore.v1.Status
	10,  // 34: dpdkironcore.v1.DeletePrefixRequest.prefix:type_name -> dpdkironcore.v1.Prefix
	8,   // 35: dpdkironcore.v1.DeletePrefixResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 36: dpdkironcore.v1.ListLoadBalancerPrefixesResponse.status:type_name -> dpdkironcore.v1.Status
	10,  // 37: dpdkironcore.v1.ListLoadBalancerPrefixesResponse.prefixes:type_name -> dpdkironcore.v1.Prefix
	10,  // 38: dpdkironcore.v1.CreateLoadBalancerPrefixRequest.prefix:type_name -> dpdkironcore.v1.Prefix
	8,   // 39: dpdkironcore.v1.CreateLoadBalancerPrefixResponse.status:type_name -> dpdkironcore.v1.Status
	10,  // 40: dpdkironcore.v1.DeleteLoadBalancerPrefixRequest.prefix:type_name -> dpdkironcore.v1.Prefix
	8,   // 41: dpdkironcore.v1.DeleteLoadBalancerPrefixResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 42: dpdkironcore.v1.CreateVipRequest.vip_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 43: dpdkironcore.v1.CreateVipResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 44: dpdkironcore.v1.GetVipResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 45: dpdkironcore.v1.GetVipResponse.vip_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 46: dpdkironcore.v1.DeleteVipResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 47: dpdkironcore.v1.CreateLoadBalancerRequest.loadbalanced_ip:type_name -> dpdkironcore.v1.IpAddress
	15,  // 48: dpdkironcore.v1.CreateLoadBalancerRequest.loadbalanced_ports:type_name -> dpdkironcore.v1.LbPort
	8,   // 49: dpdkironcore.v1.CreateLoadBalancerResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 50: dpdkironcore.v1.GetLoadBalancerResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 51: dpdkironcore.v1.GetLoadBalancerResponse.loadbalanced_ip:type_name -> dpdkironcore.v1.IpAddress
	15,  // 52: dpdkironcore.v1.GetLoadBalancerResponse.loadbalanced_ports:type_name -> dpdkironcore.v1.LbPort
	8,   // 53: dpdkironcore.v1.DeleteLoadBalancerResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 54: dpdkironcore.v1.CreateLoadBalancerTargetRequest.target_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 55: dpdkironcore.v1.CreateLoadBalancerTargetResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 56: dpdkironcore.v1.ListLoadBalancerTargetsResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 57: dpdkironcore.v1.ListLoadBalancerTargetsResponse.target_ips:type_name -> dpdkironcore.v1.IpAddress
	9,   // 58: dpdkironcore.v1.DeleteLoadBalancerTargetRequest.target_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 59: dpdkironcore.v1.DeleteLoadBalancerTargetResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 60: dpdkironcore.v1.CreateNatRequest.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 61: dpdkironcore.v1.CreateNatResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 62: dpdkironcore.v1.GetNatResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 63: dpdkironcore.v1.GetNatResponse.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 64: dpdkironcore.v1.DeleteNatResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 65: dpdkironcore.v1.CreateNeighborNatRequest.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 66: dpdkironcore.v1.CreateNeighborNatResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 67: dpdkironcore.v1.DeleteNeighborNatRequest.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 68: dpdkironcore.v1.DeleteNeighborNatResponse.status:type_name -> dpdkironcore.v1.Status
	9,   // 69: dpdkironcore.v1.ListLocalNatsRequest.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 70: dpdkironcore.v1.ListLocalNatsResponse.status:type_name -> dpdkironcore.v1.Status
	16,  // 71: dpdkironcore.v1.ListLocalNatsResponse.nat_entries:type_name -> dpdkironcore.v1.NatEntry
	9,   // 72: dpdkironcore.v1.ListNeighborNatsRequest.nat_ip:type_name -> dpdkironcore.v1.IpAddress
	8,   // 73: dpdkironcore.v1.ListNeighborNatsResponse.status:type_name -> dpdkironcore.v1.Status
	16,  // 74: dpdkironcore.v1.ListNeighborNatsResponse.nat_entries:type_name -> dpdkironcore.v1.NatEntry
	8,   // 75: dpdkironcore.v1.ListRoutesResponse.status:type_name -> dpdkironcore.v1.Status
	17,  // 76: dpdkironcore.v1.ListRoutesResponse.routes:type_name -> dpdkironcore.v1.Route
	17,  // 77: dpdkironcore.v1.CreateRouteRequest.route:type_name -> dpdkironcore.v1.Route
	8,   // 78: dpdkironcore.v1.CreateRouteResponse.status:type_name -> dpdkironcore.v1.Status
	17,  // 79: dpdkironcore.v1.DeleteRouteRequest.route:type_name -> dpdkironcore.v1.Route
	8,   // 80: dpdkironcore.v1.DeleteRouteResponse.status:type_name -> dpdkironcore.v1.Status
	5,   // 81: dpdkironcore.v1.CheckVniInUseRequest.type:type_name -> dpdkironcore.v1.VniType
	8,   // 82: dpdkironcore.v1.CheckVniInUseResponse.status:type_name -> dpdkironcore.v1.Status
	5,   // 83: dpdkironcore.v1.ResetVniRequest.type:type_name -> dpdkironcore.v1.VniType
	8,   // 84: dpdkironcore.v1.ResetVniResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 85: dpdkironcore.v1.ListFirewallRulesResponse.status:type_name -> dpdkironcore.v1.Status
	23,  // 86: dpdkironcore.v1.ListFirewallRulesResponse.rules:type_name -> dpdkironcore.v1.FirewallRule
	23,  // 87: dpdkironcore.v1.CreateFirewallRuleRequest.rule:type_name -> dpdkironcore.v1.FirewallRule
	8,   // 88: dpdkironcore.v1.CreateFirewallRuleResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 89: dpdkironcore.v1.GetFirewallRuleResponse.status:type_name -> dpdkironcore.v1.Status
	23,  // 90: dpdkironcore.v1.GetFirewallRuleResponse.rule:type_name -> dpdkironcore.v1.FirewallRule
	8,   // 91: dpdkironcore.v1.DeleteFirewallRuleResponse.status:type_name -> dpdkironcore.v1.Status
	6,   // 92: dpdkironcore.v1.CapturedInterface.interface_type:type_name -> dpdkironcore.v1.CaptureInterfaceType
	9,   // 93: dpdkironcore.v1.CaptureConfig.sink_node_ip:type_name -> dpdkironcore.v1.IpAddress
	100, // 94: dpdkironcore.v1.CaptureConfig.interfaces:type_name -> dpdkironcore.v1.CapturedInterface
	101, // 95: dpdkironcore.v1.CaptureStartRequest.capture_config:type_name -> dpdkironcore.v1.CaptureConfig
	8,   // 96: dpdkironcore.v1.CaptureStartResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 97: dpdkironcore.v1.CaptureStopResponse.status:type_name -> dpdkironcore.v1.Status
	8,   // 98: dpdkironcore.v1.CaptureStatusResponse.status:type_name -> dpdkironcore.v1.Status
	101, // 99: dpdkironcore.v1.CaptureStatusResponse.capture_config:type_name -> dpdkironcore.v1.CaptureConfig
	24,  // 100: dpdkironcore.v1.DPDKironcore.CheckInitialized:input_type -> dpdkironcore.v1.CheckInitializedRequest
	26,  // 101: dpdkironcore.v1.DPDKironcore.Initialize:input_type -> dpdkironcore.v1.InitializeRequest
	28,  // 102: dpdkironcore.v1.DPDKironcore.GetVersion:input_type -> dpdkironcore.v1.GetVersionRequest
	30,  // 103: dpdkironcore.v1.DPDKironcore.ListInterfaces:input_type -> dpdkironcore.v1.ListInterfacesRequest
	32,  // 104: dpdkironcore.v1.DPDKironcore.GetInterface:input_type -> dpdkironcore.v1.GetInterfaceRequest
	34,  // 105: dpdkironcore.v1.DPDKironcore.CreateInterface:input_type -> dpdkironcore.v1.CreateInterfaceRequest
	36,  // 106: dpdkironcore.v1.DPDKironcore.DeleteInterface:input_type -> dpdkironcore.v1.DeleteInterfaceRequest
	38,  // 107: dpdkironcore.v1.DPDKironcore.ListPrefixes:input_type -> dpdkironcore.v1.ListPrefixesRequest
	40,  // 108: dpdkironcore.v1.DPDKironcore.CreatePrefix:input_type -> dpdkironcore.v1.CreatePrefixRequest
	42,  // 109: dpdkironcore.v1.DPDKironcore.DeletePrefix:input_type -> dpdkironcore.v1.DeletePrefixRequest
	44,  // 110: dpdkironcore.v1.DPDKironcore.ListLoadBalancerPrefixes:input_type -> dpdkironcore.v1.ListLoadBalancerPrefixesRequest
	46,  // 111: dpdkironcore.v1.DPDKironcore.CreateLoadBalancerPrefix:input_type -> dpdkironcore.v1.CreateLoadBalancerPrefixRequest
	48,  // 112: dpdkironcore.v1.DPDKironcore.DeleteLoadBalancerPrefix:input_type -> dpdkironcore.v1.DeleteLoadBalancerPrefixRequest
	50,  // 113: dpdkironcore.v1.DPDKironcore.CreateVip:input_type -> dpdkironcore.v1.CreateVipRequest
	52,  // 114: dpdkironcore.v1.DPDKironcore.GetVip:input_type -> dpdkironcore.v1.GetVipRequest
	54,  // 115: dpdkironcore.v1.DPDKironcore.DeleteVip:input_type -> dpdkironcore.v1.DeleteVipRequest
	56,  // 116: dpdkironcore.v1.DPDKironcore.CreateLoadBalancer:input_type -> dpdkironcore.v1.CreateLoadBalancerRequest
	58,  // 117: dpdkironcore.v1.DPDKironcore.GetLoadBalancer:input_type -> dpdkironcore.v1.GetLoadBalancerRequest
	60,  // 118: dpdkironcore.v1.DPDKironcore.DeleteLoadBalancer:input_type -> dpdkironcore.v1.DeleteLoadBalancerRequest
	62,  // 119: dpdkironcore.v1.DPDKironcore.CreateLoadBalancerTarget:input_type -> dpdkironcore.v1.CreateLoadBalancerTargetRequest
	64,  // 120: dpdkironcore.v1.DPDKironcore.ListLoadBalancerTargets:input_type -> dpdkironcore.v1.ListLoadBalancerTargetsRequest
	66,  // 121: dpdkironcore.v1.DPDKironcore.DeleteLoadBalancerTarget:input_type -> dpdkironcore.v1.DeleteLoadBalancerTargetRequest
	68,  // 122: dpdkironcore.v1.DPDKironcore.CreateNat:input_type -> dpdkironcore.v1.CreateNatRequest
	70,  // 123: dpdkironcore.v1.DPDKironcore.GetNat:input_type -> dpdkironcore.v1.GetNatRequest
	72,  // 124: dpdkironcore.v1.DPDKironcore.DeleteNat:input_type -> dpdkironcore.v1.DeleteNatRequest
	78,  // 125: dpdkironcore.v1.DPDKironcore.ListLocalNats:input_type -> dpdkironcore.v1.ListLocalNatsRequest
	74,  // 126: dpdkironcore.v1.DPDKironcore.CreateNeighborNat:input_type -> dpdkironcore.v1.CreateNeighborNatRequest
	76,  // 127: dpdkironcore.v1.DPDKironcore.DeleteNeighborNat:input_type -> dpdkironcore.v1.DeleteNeighborNatRequest
	80,  // 128: dpdkironcore.v1.DPDKironcore.ListNeighborNats:input_type -> dpdkironcore.v1.ListNeighborNatsRequest
	82,  // 129: dpdkironcore.v1.DPDKironcore.ListRoutes:input_type -> dpdkironcore.v1.ListRoutesRequest
	84,  // 130: dpdkironcore.v1.DPDKironcore.CreateRoute:input_type -> dpdkironcore.v1.CreateRouteRequest
	86,  // 131: dpdkironcore.v1.DPDKironcore.DeleteRoute:input_type -> dpdkironcore.v1.DeleteRouteRequest
	88,  // 132: dpdkironcore.v1.DPDKironcore.CheckVniInUse:input_type -> dpdkironcore.v1.CheckVniInUseRequest
	90,  // 133: dpdkironcore.v1.DPDKironcore.ResetVni:input_type -> dpdkironcore.v1.ResetVniRequest
	92,  // 134: dpdkironcore.v1.DPDKironcore.ListFirewallRules:input_type -> dpdkironcore.v1.ListFirewallRulesRequest
	94,  // 135: dpdkironcore.v1.DPDKironcore.CreateFirewallRule:input_type -> dpdkironcore.v1.CreateFirewallRuleRequest
	96,  // 136: dpdkironcore.v1.DPDKironcore.GetFirewallRule:input_type -> dpdkironcore.v1.GetFirewallRuleRequest
	98,  // 137: dpdkironcore.v1.DPDKironcore.DeleteFirewallRule:input_type -> dpdkironcore.v1.DeleteFirewallRuleRequest
	102, // 138: dpdkironcore.v1.DPDKironcore.CaptureStart:input_type -> dpdkironcore.v1.CaptureStartRequest
	104, // 139: dpdkironcore.v1.DPDKironcore.CaptureStop:input_type -> dpdkironcore.v1.CaptureStopRequest
	106, // 140: dpdkironcore.v1.DPDKironcore.CaptureStatus:input_type -> dpdkironcore.v1.CaptureStatusRequest
	25,  // 141: dpdkironcore.v1.DPDKironcore.CheckInitialized:output_type -> dpdkironcore.v1.CheckInitializedResponse
	27,  // 142: dpdkironcore.v1.DPDKironcore.Initialize:output_type -> dpdkironcore.v1.InitializeResponse
	29,  // 143: dpdkironcore.v1.DPDKironcore.GetVersion:output_type -> dpdkironcore.v1.GetVersionResponse
	31,  // 144: dpdkironcore.v1.DPDKironcore.ListInterfaces:output_type -> dpdkironcore.v1.ListInterfacesResponse
	33,  // 145: dpdkironcore.v1.DPDKironcore.GetInterface:output_type -> dpdkironcore.v1.GetInterfaceResponse
	35,  // 146: dpdkironcore.v1.DPDKironcore.CreateInterface:output_type -> dpdkironcore.v1.CreateInterfaceResponse
	37,  // 147: dpdkironcore.v1.DPDKironcore.DeleteInterface:output_type -> dpdkironcore.v1.DeleteInterfaceResponse
	39,  // 148: dpdkironcore.v1.DPDKironcore.ListPrefixes:output_type -> dpdkironcore.v1.ListPrefixesResponse
	41,  // 149: dpdkironcore.v1.DPDKironcore.CreatePrefix:output_type -> dpdkironcore.v1.CreatePrefixResponse
	43,  // 150: dpdkironcore.v1.DPDKironcore.DeletePrefix:output_type -> dpdkironcore.v1.DeletePrefixResponse
	45,  // 151: dpdkironcore.v1.DPDKironcore.ListLoadBalancerPrefixes:output_type -> dpdkironcore.v1.ListLoadBalancerPrefixesResponse
	47,  // 152: dpdkironcore.v1.DPDKironcore.CreateLoadBalancerPrefix:output_type -> dpdkironcore.v1.CreateLoadBalancerPrefixResponse
	49,  // 153: dpdkironcore.v1.DPDKironcore.DeleteLoadBalancerPrefix:output_type -> dpdkironcore.v1.DeleteLoadBalancerPrefixResponse
	51,  // 154: dpdkironcore.v1.DPDKironcore.CreateVip:output_type -> dpdkironcore.v1.CreateVipResponse
	53,  // 155: dpdkironcore.v1.DPDKironcore.GetVip:output_type -> dpdkironcore.v1.GetVipResponse
	55,  // 156: dpdkironcore.v1.DPDKironcore.DeleteVip:output_type -> dpdkironcore.v1.DeleteVipResponse
	57,  // 157: dpdkironcore.v1.DPDKironcore.CreateLoadBalancer:output_type -> dpdkironcore.v1.CreateLoadBalancerResponse
	59,  // 158: dpdkironcore.v1.DPDKironcore.GetLoadBalancer:output_type -> dpdkironcore.v1.GetLoadBalancerResponse
	61,  // 159: dpdkironcore.v1.DPDKironcore.DeleteLoadBalancer:output_type -> dpdkironcore.v1.DeleteLoadBalancerResponse
	63,  // 160: dpdkironcore.v1.DPDKironcore.CreateLoadBalancerTarget:output_type -> dpdkironcore.v1.CreateLoadBalancerTargetResponse
	65,  // 161: dpdkironcore.v1.DPDKironcore.ListLoadBalancerTargets:output_type -> dpdkironcore.v1.ListLoadBalancerTargetsResponse
	67,  // 162: dpdkironcore.v1.DPDKironcore.DeleteLoadBalancerTarget:output_type -> dpdkironcore.v1.DeleteLoadBalancerTargetResponse
	69,  // 163: dpdkironcore.v1.DPDKironcore.CreateNat:output_type -> dpdkironcore.v1.CreateNatResponse
	71,  // 164: dpdkironcore.v1.DPDKironcore.GetNat:output_type -> dpdkironcore.v1.GetNatResponse
	73,  // 165: dpdkironcore.v1.DPDKironcore.DeleteNat:output_type -> dpdkironcore.v1.DeleteNatResponse
	79,  // 166: dpdkironcore.v1.DPDKironcore.ListLocalNats:output_type -> dpdkironcore.v1.ListLocalNatsResponse
	75,  // 167: dpdkironcore.v1.DPDKironcore.CreateNeighborNat:output_type -> dpdkironcore.v1.CreateNeighborNatResponse
	77,  // 168: dpdkironcore.v1.DPDKironcore.DeleteNeighborNat:output_type -> dpdkironcore.v1.DeleteNeighborNatResponse
	81,  // 169: dpdkironcore.v1.DPDKironcore.ListNeighborNats:output_type -> dpdkironcore.v1.ListNeighborNatsResponse
	83,  // 170: dpdkironcore.v1.DPDKironcore.ListRoutes:output_type -> dpdkironcore.v1.ListRoutesResponse
	85,  // 171: dpdkironcore.v1.DPDKironcore.CreateRoute:output_type -> dpdkironcore.v1.CreateRouteResponse
	87,  // 172: dpdkironcore.v1.DPDKironcore.DeleteRoute:output_type -> dpdkironcore.v1.DeleteRouteResponse
	89,  // 173: dpdkironcore.v1.DPDKironcore.CheckVniInUse:output_type -> dpdkironcore.v1.CheckVniInUseResponse
	91,  // 174: dpdkironcore.v1.DPDKironcore.ResetVni:output_type -> dpdkironcore.v1.ResetVniResponse
	93,  // 175: dpdkironcore.v1.DPDKironcore.ListFirewallRules:output_type -> dpdkironcore.v1.ListFirewallRulesResponse
	95,  // 176: dpdkironcore.v1.DPDKironcore.CreateFirewallRule:output_type -> dpdkironcore.v1.CreateFirewallRuleResponse
	97,  // 177: dpdkironcore.v1.DPDKironcore.GetFirewallRule:output_type -> dpdkironcore.v1.GetFirewallRuleResponse
	99,  // 178: dpdkironcore.v1.DPDKironcore.DeleteFirewallRule:output_type -> dpdkironcore.v1.DeleteFirewallRuleResponse
	103, // 179: dpdkironcore.v1.DPDKironcore.CaptureStart:output_type -> dpdkironcore.v1.CaptureStartResponse
	105, // 180: dpdkironcore.v1.DPDKironcore.CaptureStop:output_type -> dpdkironcore.v1.CaptureStopResponse
	107, // 181: dpdkironcore.v1.DPDKironcore.CaptureStatus:output_type -> dpdkironcore.v1.CaptureStatusResponse
	141, // [141:182] is the sub-list for method output_type
	100, // [100:141] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_proto_dpdk_proto_init() }
func file_proto_dpdk_proto_init() {
	if File_proto_dpdk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dpdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LbPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcmpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeteringParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInitializedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInitializedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPrefixesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPrefixesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoadBalancerPrefixesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoadBalancerPrefixesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoadBalancerTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoadBalancerTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNeighborNatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNeighborNatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNeighborNatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNeighborNatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLocalNatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLocalNatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNeighborNatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNeighborNatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVniInUseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVniInUseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetVniRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetVniResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFirewallRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFirewallRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapturedInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_dpdk_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ProtocolFilter_Icmp)(nil),
		(*ProtocolFilter_Tcp)(nil),
		(*ProtocolFilter_Udp)(nil),
	}
	file_proto_dpdk_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*CapturedInterface_VfName)(nil),
		(*CapturedInterface_PfIndex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dpdk_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dpdk_proto_goTypes,
		DependencyIndexes: file_proto_dpdk_proto_depIdxs,
		EnumInfos:         file_proto_dpdk_proto_enumTypes,
		MessageInfos:      file_proto_dpdk_proto_msgTypes,
	}.Build()
	File_proto_dpdk_proto = out.File
	file_proto_dpdk_proto_rawDesc = nil
	file_proto_dpdk_proto_goTypes = nil
	file_proto_dpdk_proto_depIdxs = nil
}
