// SPDX-FileCopyrightText: 2022 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/dpdk.proto

package dpdkproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DPDKironcore_CheckInitialized_FullMethodName         = "/dpdkironcore.v1.DPDKironcore/CheckInitialized"
	DPDKironcore_Initialize_FullMethodName               = "/dpdkironcore.v1.DPDKironcore/Initialize"
	DPDKironcore_GetVersion_FullMethodName               = "/dpdkironcore.v1.DPDKironcore/GetVersion"
	DPDKironcore_ListInterfaces_FullMethodName           = "/dpdkironcore.v1.DPDKironcore/ListInterfaces"
	DPDKironcore_GetInterface_FullMethodName             = "/dpdkironcore.v1.DPDKironcore/GetInterface"
	DPDKironcore_CreateInterface_FullMethodName          = "/dpdkironcore.v1.DPDKironcore/CreateInterface"
	DPDKironcore_DeleteInterface_FullMethodName          = "/dpdkironcore.v1.DPDKironcore/DeleteInterface"
	DPDKironcore_ListPrefixes_FullMethodName             = "/dpdkironcore.v1.DPDKironcore/ListPrefixes"
	DPDKironcore_CreatePrefix_FullMethodName             = "/dpdkironcore.v1.DPDKironcore/CreatePrefix"
	DPDKironcore_DeletePrefix_FullMethodName             = "/dpdkironcore.v1.DPDKironcore/DeletePrefix"
	DPDKironcore_ListLoadBalancerPrefixes_FullMethodName = "/dpdkironcore.v1.DPDKironcore/ListLoadBalancerPrefixes"
	DPDKironcore_CreateLoadBalancerPrefix_FullMethodName = "/dpdkironcore.v1.DPDKironcore/CreateLoadBalancerPrefix"
	DPDKironcore_DeleteLoadBalancerPrefix_FullMethodName = "/dpdkironcore.v1.DPDKironcore/DeleteLoadBalancerPrefix"
	DPDKironcore_CreateVip_FullMethodName                = "/dpdkironcore.v1.DPDKironcore/CreateVip"
	DPDKironcore_GetVip_FullMethodName                   = "/dpdkironcore.v1.DPDKironcore/GetVip"
	DPDKironcore_DeleteVip_FullMethodName                = "/dpdkironcore.v1.DPDKironcore/DeleteVip"
	DPDKironcore_CreateLoadBalancer_FullMethodName       = "/dpdkironcore.v1.DPDKironcore/CreateLoadBalancer"
	DPDKironcore_GetLoadBalancer_FullMethodName          = "/dpdkironcore.v1.DPDKironcore/GetLoadBalancer"
	DPDKironcore_DeleteLoadBalancer_FullMethodName       = "/dpdkironcore.v1.DPDKironcore/DeleteLoadBalancer"
	DPDKironcore_CreateLoadBalancerTarget_FullMethodName = "/dpdkironcore.v1.DPDKironcore/CreateLoadBalancerTarget"
	DPDKironcore_ListLoadBalancerTargets_FullMethodName  = "/dpdkironcore.v1.DPDKironcore/ListLoadBalancerTargets"
	DPDKironcore_DeleteLoadBalancerTarget_FullMethodName = "/dpdkironcore.v1.DPDKironcore/DeleteLoadBalancerTarget"
	DPDKironcore_CreateNat_FullMethodName                = "/dpdkironcore.v1.DPDKironcore/CreateNat"
	DPDKironcore_GetNat_FullMethodName                   = "/dpdkironcore.v1.DPDKironcore/GetNat"
	DPDKironcore_DeleteNat_FullMethodName                = "/dpdkironcore.v1.DPDKironcore/DeleteNat"
	DPDKironcore_ListLocalNats_FullMethodName            = "/dpdkironcore.v1.DPDKironcore/ListLocalNats"
	DPDKironcore_CreateNeighborNat_FullMethodName        = "/dpdkironcore.v1.DPDKironcore/CreateNeighborNat"
	DPDKironcore_DeleteNeighborNat_FullMethodName        = "/dpdkironcore.v1.DPDKironcore/DeleteNeighborNat"
	DPDKironcore_ListNeighborNats_FullMethodName         = "/dpdkironcore.v1.DPDKironcore/ListNeighborNats"
	DPDKironcore_ListRoutes_FullMethodName               = "/dpdkironcore.v1.DPDKironcore/ListRoutes"
	DPDKironcore_CreateRoute_FullMethodName              = "/dpdkironcore.v1.DPDKironcore/CreateRoute"
	DPDKironcore_DeleteRoute_FullMethodName              = "/dpdkironcore.v1.DPDKironcore/DeleteRoute"
	DPDKironcore_CheckVniInUse_FullMethodName            = "/dpdkironcore.v1.DPDKironcore/CheckVniInUse"
	DPDKironcore_ResetVni_FullMethodName                 = "/dpdkironcore.v1.DPDKironcore/ResetVni"
	DPDKironcore_ListFirewallRules_FullMethodName        = "/dpdkironcore.v1.DPDKironcore/ListFirewallRules"
	DPDKironcore_CreateFirewallRule_FullMethodName       = "/dpdkironcore.v1.DPDKironcore/CreateFirewallRule"
	DPDKironcore_GetFirewallRule_FullMethodName          = "/dpdkironcore.v1.DPDKironcore/GetFirewallRule"
	DPDKironcore_DeleteFirewallRule_FullMethodName       = "/dpdkironcore.v1.DPDKironcore/DeleteFirewallRule"
	DPDKironcore_CaptureStart_FullMethodName             = "/dpdkironcore.v1.DPDKironcore/CaptureStart"
	DPDKironcore_CaptureStop_FullMethodName              = "/dpdkironcore.v1.DPDKironcore/CaptureStop"
	DPDKironcore_CaptureStatus_FullMethodName            = "/dpdkironcore.v1.DPDKironcore/CaptureStatus"
)

// DPDKironcoreClient is the client API for DPDKironcore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DPDKironcoreClient interface {
	// // INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already, if so an UUID is returned.
	// this UUID gets changed in case the dp-service gets restarted.
	CheckInitialized(ctx context.Context, in *CheckInitializedRequest, opts ...grpc.CallOption) (*CheckInitializedResponse, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// // VERSIONING
	// Exchange protocol/app versions to establish communication
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// // INTERFACES
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error)
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// CreateInterface creates and configures a VF (hypervisor case) or PF (bare metal) for the new interface.
	// If the interface's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling CreateInterface() the Client has to make sure that the routing table of the corresponding VNet is filled (use ListRoutes and AddRoute as required).
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error)
	// DeleteInterface removes all networking configuration of a interface from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the interface was the last interface of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteInterfaceResponse, error)
	// ListPrefixes returns a list of prefixes, that will be routed to the interface by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListPrefixes(ctx context.Context, in *ListPrefixesRequest, opts ...grpc.CallOption) (*ListPrefixesResponse, error)
	CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error)
	DeletePrefix(ctx context.Context, in *DeletePrefixRequest, opts ...grpc.CallOption) (*DeletePrefixResponse, error)
	// LoadBalancerTargetPrefix(es) are similar to Prefixes but used for LoadBalancing purposes
	ListLoadBalancerPrefixes(ctx context.Context, in *ListLoadBalancerPrefixesRequest, opts ...grpc.CallOption) (*ListLoadBalancerPrefixesResponse, error)
	CreateLoadBalancerPrefix(ctx context.Context, in *CreateLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*CreateLoadBalancerPrefixResponse, error)
	DeleteLoadBalancerPrefix(ctx context.Context, in *DeleteLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerPrefixResponse, error)
	// Nat related, add/get/del Virtual IP for a given Interface
	CreateVip(ctx context.Context, in *CreateVipRequest, opts ...grpc.CallOption) (*CreateVipResponse, error)
	GetVip(ctx context.Context, in *GetVipRequest, opts ...grpc.CallOption) (*GetVipResponse, error)
	DeleteVip(ctx context.Context, in *DeleteVipRequest, opts ...grpc.CallOption) (*DeleteVipResponse, error)
	// create/list/del Loadbalancer for a given IP to be loadbalanced
	CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*CreateLoadBalancerResponse, error)
	GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*GetLoadBalancerResponse, error)
	DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerResponse, error)
	// create/list/del Loadbalancer Targets for a given Loadbalancer ID
	CreateLoadBalancerTarget(ctx context.Context, in *CreateLoadBalancerTargetRequest, opts ...grpc.CallOption) (*CreateLoadBalancerTargetResponse, error)
	ListLoadBalancerTargets(ctx context.Context, in *ListLoadBalancerTargetsRequest, opts ...grpc.CallOption) (*ListLoadBalancerTargetsResponse, error)
	DeleteLoadBalancerTarget(ctx context.Context, in *DeleteLoadBalancerTargetRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerTargetResponse, error)
	// Network-Nat related, add/del/get a Nat for an interface
	CreateNat(ctx context.Context, in *CreateNatRequest, opts ...grpc.CallOption) (*CreateNatResponse, error)
	GetNat(ctx context.Context, in *GetNatRequest, opts ...grpc.CallOption) (*GetNatResponse, error)
	DeleteNat(ctx context.Context, in *DeleteNatRequest, opts ...grpc.CallOption) (*DeleteNatResponse, error)
	ListLocalNats(ctx context.Context, in *ListLocalNatsRequest, opts ...grpc.CallOption) (*ListLocalNatsResponse, error)
	CreateNeighborNat(ctx context.Context, in *CreateNeighborNatRequest, opts ...grpc.CallOption) (*CreateNeighborNatResponse, error)
	DeleteNeighborNat(ctx context.Context, in *DeleteNeighborNatRequest, opts ...grpc.CallOption) (*DeleteNeighborNatResponse, error)
	ListNeighborNats(ctx context.Context, in *ListNeighborNatsRequest, opts ...grpc.CallOption) (*ListNeighborNatsResponse, error)
	// // ROUTES
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	// CreateRoute adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any interface in the specified VNet, an error will be returned.
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	// DeleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	// VNI internal state information
	// VNI can be in use by interfaces and by loadbalancer. So get information
	// whether the VNI in question is in use or not.
	CheckVniInUse(ctx context.Context, in *CheckVniInUseRequest, opts ...grpc.CallOption) (*CheckVniInUseResponse, error)
	ResetVni(ctx context.Context, in *ResetVniRequest, opts ...grpc.CallOption) (*ResetVniResponse, error)
	// // FIREWALL
	ListFirewallRules(ctx context.Context, in *ListFirewallRulesRequest, opts ...grpc.CallOption) (*ListFirewallRulesResponse, error)
	CreateFirewallRule(ctx context.Context, in *CreateFirewallRuleRequest, opts ...grpc.CallOption) (*CreateFirewallRuleResponse, error)
	GetFirewallRule(ctx context.Context, in *GetFirewallRuleRequest, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error)
	DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*DeleteFirewallRuleResponse, error)
	// // PACKET CAPTURE
	CaptureStart(ctx context.Context, in *CaptureStartRequest, opts ...grpc.CallOption) (*CaptureStartResponse, error)
	CaptureStop(ctx context.Context, in *CaptureStopRequest, opts ...grpc.CallOption) (*CaptureStopResponse, error)
	CaptureStatus(ctx context.Context, in *CaptureStatusRequest, opts ...grpc.CallOption) (*CaptureStatusResponse, error)
}

type dPDKironcoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDPDKironcoreClient(cc grpc.ClientConnInterface) DPDKironcoreClient {
	return &dPDKironcoreClient{cc}
}

func (c *dPDKironcoreClient) CheckInitialized(ctx context.Context, in *CheckInitializedRequest, opts ...grpc.CallOption) (*CheckInitializedResponse, error) {
	out := new(CheckInitializedResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CheckInitialized_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_Initialize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error) {
	out := new(ListInterfacesResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListInterfaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_GetInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error) {
	out := new(CreateInterfaceResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteInterfaceResponse, error) {
	out := new(DeleteInterfaceResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListPrefixes(ctx context.Context, in *ListPrefixesRequest, opts ...grpc.CallOption) (*ListPrefixesResponse, error) {
	out := new(ListPrefixesResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListPrefixes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error) {
	out := new(CreatePrefixResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreatePrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeletePrefix(ctx context.Context, in *DeletePrefixRequest, opts ...grpc.CallOption) (*DeletePrefixResponse, error) {
	out := new(DeletePrefixResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeletePrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListLoadBalancerPrefixes(ctx context.Context, in *ListLoadBalancerPrefixesRequest, opts ...grpc.CallOption) (*ListLoadBalancerPrefixesResponse, error) {
	out := new(ListLoadBalancerPrefixesResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListLoadBalancerPrefixes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateLoadBalancerPrefix(ctx context.Context, in *CreateLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*CreateLoadBalancerPrefixResponse, error) {
	out := new(CreateLoadBalancerPrefixResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateLoadBalancerPrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteLoadBalancerPrefix(ctx context.Context, in *DeleteLoadBalancerPrefixRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerPrefixResponse, error) {
	out := new(DeleteLoadBalancerPrefixResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteLoadBalancerPrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateVip(ctx context.Context, in *CreateVipRequest, opts ...grpc.CallOption) (*CreateVipResponse, error) {
	out := new(CreateVipResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateVip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) GetVip(ctx context.Context, in *GetVipRequest, opts ...grpc.CallOption) (*GetVipResponse, error) {
	out := new(GetVipResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_GetVip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteVip(ctx context.Context, in *DeleteVipRequest, opts ...grpc.CallOption) (*DeleteVipResponse, error) {
	out := new(DeleteVipResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteVip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*CreateLoadBalancerResponse, error) {
	out := new(CreateLoadBalancerResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*GetLoadBalancerResponse, error) {
	out := new(GetLoadBalancerResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_GetLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerResponse, error) {
	out := new(DeleteLoadBalancerResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateLoadBalancerTarget(ctx context.Context, in *CreateLoadBalancerTargetRequest, opts ...grpc.CallOption) (*CreateLoadBalancerTargetResponse, error) {
	out := new(CreateLoadBalancerTargetResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateLoadBalancerTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListLoadBalancerTargets(ctx context.Context, in *ListLoadBalancerTargetsRequest, opts ...grpc.CallOption) (*ListLoadBalancerTargetsResponse, error) {
	out := new(ListLoadBalancerTargetsResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListLoadBalancerTargets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteLoadBalancerTarget(ctx context.Context, in *DeleteLoadBalancerTargetRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerTargetResponse, error) {
	out := new(DeleteLoadBalancerTargetResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteLoadBalancerTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateNat(ctx context.Context, in *CreateNatRequest, opts ...grpc.CallOption) (*CreateNatResponse, error) {
	out := new(CreateNatResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateNat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) GetNat(ctx context.Context, in *GetNatRequest, opts ...grpc.CallOption) (*GetNatResponse, error) {
	out := new(GetNatResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_GetNat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteNat(ctx context.Context, in *DeleteNatRequest, opts ...grpc.CallOption) (*DeleteNatResponse, error) {
	out := new(DeleteNatResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteNat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListLocalNats(ctx context.Context, in *ListLocalNatsRequest, opts ...grpc.CallOption) (*ListLocalNatsResponse, error) {
	out := new(ListLocalNatsResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListLocalNats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateNeighborNat(ctx context.Context, in *CreateNeighborNatRequest, opts ...grpc.CallOption) (*CreateNeighborNatResponse, error) {
	out := new(CreateNeighborNatResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateNeighborNat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteNeighborNat(ctx context.Context, in *DeleteNeighborNatRequest, opts ...grpc.CallOption) (*DeleteNeighborNatResponse, error) {
	out := new(DeleteNeighborNatResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteNeighborNat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListNeighborNats(ctx context.Context, in *ListNeighborNatsRequest, opts ...grpc.CallOption) (*ListNeighborNatsResponse, error) {
	out := new(ListNeighborNatsResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListNeighborNats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CheckVniInUse(ctx context.Context, in *CheckVniInUseRequest, opts ...grpc.CallOption) (*CheckVniInUseResponse, error) {
	out := new(CheckVniInUseResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CheckVniInUse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ResetVni(ctx context.Context, in *ResetVniRequest, opts ...grpc.CallOption) (*ResetVniResponse, error) {
	out := new(ResetVniResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ResetVni_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) ListFirewallRules(ctx context.Context, in *ListFirewallRulesRequest, opts ...grpc.CallOption) (*ListFirewallRulesResponse, error) {
	out := new(ListFirewallRulesResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_ListFirewallRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CreateFirewallRule(ctx context.Context, in *CreateFirewallRuleRequest, opts ...grpc.CallOption) (*CreateFirewallRuleResponse, error) {
	out := new(CreateFirewallRuleResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CreateFirewallRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) GetFirewallRule(ctx context.Context, in *GetFirewallRuleRequest, opts ...grpc.CallOption) (*GetFirewallRuleResponse, error) {
	out := new(GetFirewallRuleResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_GetFirewallRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) DeleteFirewallRule(ctx context.Context, in *DeleteFirewallRuleRequest, opts ...grpc.CallOption) (*DeleteFirewallRuleResponse, error) {
	out := new(DeleteFirewallRuleResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_DeleteFirewallRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CaptureStart(ctx context.Context, in *CaptureStartRequest, opts ...grpc.CallOption) (*CaptureStartResponse, error) {
	out := new(CaptureStartResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CaptureStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CaptureStop(ctx context.Context, in *CaptureStopRequest, opts ...grpc.CallOption) (*CaptureStopResponse, error) {
	out := new(CaptureStopResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CaptureStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKironcoreClient) CaptureStatus(ctx context.Context, in *CaptureStatusRequest, opts ...grpc.CallOption) (*CaptureStatusResponse, error) {
	out := new(CaptureStatusResponse)
	err := c.cc.Invoke(ctx, DPDKironcore_CaptureStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DPDKironcoreServer is the server API for DPDKironcore service.
// All implementations must embed UnimplementedDPDKironcoreServer
// for forward compatibility
type DPDKironcoreServer interface {
	// // INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already, if so an UUID is returned.
	// this UUID gets changed in case the dp-service gets restarted.
	CheckInitialized(context.Context, *CheckInitializedRequest) (*CheckInitializedResponse, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// // VERSIONING
	// Exchange protocol/app versions to establish communication
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// // INTERFACES
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error)
	GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error)
	// CreateInterface creates and configures a VF (hypervisor case) or PF (bare metal) for the new interface.
	// If the interface's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling CreateInterface() the Client has to make sure that the routing table of the corresponding VNet is filled (use ListRoutes and AddRoute as required).
	CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error)
	// DeleteInterface removes all networking configuration of a interface from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the interface was the last interface of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteInterfaceResponse, error)
	// ListPrefixes returns a list of prefixes, that will be routed to the interface by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListPrefixes(context.Context, *ListPrefixesRequest) (*ListPrefixesResponse, error)
	CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error)
	DeletePrefix(context.Context, *DeletePrefixRequest) (*DeletePrefixResponse, error)
	// LoadBalancerTargetPrefix(es) are similar to Prefixes but used for LoadBalancing purposes
	ListLoadBalancerPrefixes(context.Context, *ListLoadBalancerPrefixesRequest) (*ListLoadBalancerPrefixesResponse, error)
	CreateLoadBalancerPrefix(context.Context, *CreateLoadBalancerPrefixRequest) (*CreateLoadBalancerPrefixResponse, error)
	DeleteLoadBalancerPrefix(context.Context, *DeleteLoadBalancerPrefixRequest) (*DeleteLoadBalancerPrefixResponse, error)
	// Nat related, add/get/del Virtual IP for a given Interface
	CreateVip(context.Context, *CreateVipRequest) (*CreateVipResponse, error)
	GetVip(context.Context, *GetVipRequest) (*GetVipResponse, error)
	DeleteVip(context.Context, *DeleteVipRequest) (*DeleteVipResponse, error)
	// create/list/del Loadbalancer for a given IP to be loadbalanced
	CreateLoadBalancer(context.Context, *CreateLoadBalancerRequest) (*CreateLoadBalancerResponse, error)
	GetLoadBalancer(context.Context, *GetLoadBalancerRequest) (*GetLoadBalancerResponse, error)
	DeleteLoadBalancer(context.Context, *DeleteLoadBalancerRequest) (*DeleteLoadBalancerResponse, error)
	// create/list/del Loadbalancer Targets for a given Loadbalancer ID
	CreateLoadBalancerTarget(context.Context, *CreateLoadBalancerTargetRequest) (*CreateLoadBalancerTargetResponse, error)
	ListLoadBalancerTargets(context.Context, *ListLoadBalancerTargetsRequest) (*ListLoadBalancerTargetsResponse, error)
	DeleteLoadBalancerTarget(context.Context, *DeleteLoadBalancerTargetRequest) (*DeleteLoadBalancerTargetResponse, error)
	// Network-Nat related, add/del/get a Nat for an interface
	CreateNat(context.Context, *CreateNatRequest) (*CreateNatResponse, error)
	GetNat(context.Context, *GetNatRequest) (*GetNatResponse, error)
	DeleteNat(context.Context, *DeleteNatRequest) (*DeleteNatResponse, error)
	ListLocalNats(context.Context, *ListLocalNatsRequest) (*ListLocalNatsResponse, error)
	CreateNeighborNat(context.Context, *CreateNeighborNatRequest) (*CreateNeighborNatResponse, error)
	DeleteNeighborNat(context.Context, *DeleteNeighborNatRequest) (*DeleteNeighborNatResponse, error)
	ListNeighborNats(context.Context, *ListNeighborNatsRequest) (*ListNeighborNatsResponse, error)
	// // ROUTES
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	// CreateRoute adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any interface in the specified VNet, an error will be returned.
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	// DeleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	// VNI internal state information
	// VNI can be in use by interfaces and by loadbalancer. So get information
	// whether the VNI in question is in use or not.
	CheckVniInUse(context.Context, *CheckVniInUseRequest) (*CheckVniInUseResponse, error)
	ResetVni(context.Context, *ResetVniRequest) (*ResetVniResponse, error)
	// // FIREWALL
	ListFirewallRules(context.Context, *ListFirewallRulesRequest) (*ListFirewallRulesResponse, error)
	CreateFirewallRule(context.Context, *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error)
	GetFirewallRule(context.Context, *GetFirewallRuleRequest) (*GetFirewallRuleResponse, error)
	DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error)
	// // PACKET CAPTURE
	CaptureStart(context.Context, *CaptureStartRequest) (*CaptureStartResponse, error)
	CaptureStop(context.Context, *CaptureStopRequest) (*CaptureStopResponse, error)
	CaptureStatus(context.Context, *CaptureStatusRequest) (*CaptureStatusResponse, error)
	mustEmbedUnimplementedDPDKironcoreServer()
}

// UnimplementedDPDKironcoreServer must be embedded to have forward compatible implementations.
type UnimplementedDPDKironcoreServer struct {
}

func (UnimplementedDPDKironcoreServer) CheckInitialized(context.Context, *CheckInitializedRequest) (*CheckInitializedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInitialized not implemented")
}
func (UnimplementedDPDKironcoreServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedDPDKironcoreServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDPDKironcoreServer) ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedDPDKironcoreServer) GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedDPDKironcoreServer) ListPrefixes(context.Context, *ListPrefixesRequest) (*ListPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrefixes not implemented")
}
func (UnimplementedDPDKironcoreServer) CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrefix not implemented")
}
func (UnimplementedDPDKironcoreServer) DeletePrefix(context.Context, *DeletePrefixRequest) (*DeletePrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrefix not implemented")
}
func (UnimplementedDPDKironcoreServer) ListLoadBalancerPrefixes(context.Context, *ListLoadBalancerPrefixesRequest) (*ListLoadBalancerPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerPrefixes not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateLoadBalancerPrefix(context.Context, *CreateLoadBalancerPrefixRequest) (*CreateLoadBalancerPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancerPrefix not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteLoadBalancerPrefix(context.Context, *DeleteLoadBalancerPrefixRequest) (*DeleteLoadBalancerPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancerPrefix not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateVip(context.Context, *CreateVipRequest) (*CreateVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVip not implemented")
}
func (UnimplementedDPDKironcoreServer) GetVip(context.Context, *GetVipRequest) (*GetVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVip not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteVip(context.Context, *DeleteVipRequest) (*DeleteVipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVip not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateLoadBalancer(context.Context, *CreateLoadBalancerRequest) (*CreateLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancer not implemented")
}
func (UnimplementedDPDKironcoreServer) GetLoadBalancer(context.Context, *GetLoadBalancerRequest) (*GetLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancer not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteLoadBalancer(context.Context, *DeleteLoadBalancerRequest) (*DeleteLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancer not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateLoadBalancerTarget(context.Context, *CreateLoadBalancerTargetRequest) (*CreateLoadBalancerTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancerTarget not implemented")
}
func (UnimplementedDPDKironcoreServer) ListLoadBalancerTargets(context.Context, *ListLoadBalancerTargetsRequest) (*ListLoadBalancerTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerTargets not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteLoadBalancerTarget(context.Context, *DeleteLoadBalancerTargetRequest) (*DeleteLoadBalancerTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancerTarget not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateNat(context.Context, *CreateNatRequest) (*CreateNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNat not implemented")
}
func (UnimplementedDPDKironcoreServer) GetNat(context.Context, *GetNatRequest) (*GetNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNat not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteNat(context.Context, *DeleteNatRequest) (*DeleteNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNat not implemented")
}
func (UnimplementedDPDKironcoreServer) ListLocalNats(context.Context, *ListLocalNatsRequest) (*ListLocalNatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocalNats not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateNeighborNat(context.Context, *CreateNeighborNatRequest) (*CreateNeighborNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeighborNat not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteNeighborNat(context.Context, *DeleteNeighborNatRequest) (*DeleteNeighborNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNeighborNat not implemented")
}
func (UnimplementedDPDKironcoreServer) ListNeighborNats(context.Context, *ListNeighborNatsRequest) (*ListNeighborNatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNeighborNats not implemented")
}
func (UnimplementedDPDKironcoreServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedDPDKironcoreServer) CheckVniInUse(context.Context, *CheckVniInUseRequest) (*CheckVniInUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVniInUse not implemented")
}
func (UnimplementedDPDKironcoreServer) ResetVni(context.Context, *ResetVniRequest) (*ResetVniResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVni not implemented")
}
func (UnimplementedDPDKironcoreServer) ListFirewallRules(context.Context, *ListFirewallRulesRequest) (*ListFirewallRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirewallRules not implemented")
}
func (UnimplementedDPDKironcoreServer) CreateFirewallRule(context.Context, *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirewallRule not implemented")
}
func (UnimplementedDPDKironcoreServer) GetFirewallRule(context.Context, *GetFirewallRuleRequest) (*GetFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirewallRule not implemented")
}
func (UnimplementedDPDKironcoreServer) DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewallRule not implemented")
}
func (UnimplementedDPDKironcoreServer) CaptureStart(context.Context, *CaptureStartRequest) (*CaptureStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureStart not implemented")
}
func (UnimplementedDPDKironcoreServer) CaptureStop(context.Context, *CaptureStopRequest) (*CaptureStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureStop not implemented")
}
func (UnimplementedDPDKironcoreServer) CaptureStatus(context.Context, *CaptureStatusRequest) (*CaptureStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureStatus not implemented")
}
func (UnimplementedDPDKironcoreServer) mustEmbedUnimplementedDPDKironcoreServer() {}

// UnsafeDPDKironcoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DPDKironcoreServer will
// result in compilation errors.
type UnsafeDPDKironcoreServer interface {
	mustEmbedUnimplementedDPDKironcoreServer()
}

func RegisterDPDKironcoreServer(s grpc.ServiceRegistrar, srv DPDKironcoreServer) {
	s.RegisterService(&DPDKironcore_ServiceDesc, srv)
}

func _DPDKironcore_CheckInitialized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInitializedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CheckInitialized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CheckInitialized_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CheckInitialized(ctx, req.(*CheckInitializedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_GetInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListPrefixes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListPrefixes(ctx, req.(*ListPrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreatePrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreatePrefix(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeletePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeletePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeletePrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeletePrefix(ctx, req.(*DeletePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListLoadBalancerPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerPrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListLoadBalancerPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListLoadBalancerPrefixes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListLoadBalancerPrefixes(ctx, req.(*ListLoadBalancerPrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateLoadBalancerPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateLoadBalancerPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateLoadBalancerPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateLoadBalancerPrefix(ctx, req.(*CreateLoadBalancerPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteLoadBalancerPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteLoadBalancerPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteLoadBalancerPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteLoadBalancerPrefix(ctx, req.(*DeleteLoadBalancerPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateVip(ctx, req.(*CreateVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_GetVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).GetVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_GetVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).GetVip(ctx, req.(*GetVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteVip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteVip(ctx, req.(*DeleteVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateLoadBalancer(ctx, req.(*CreateLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_GetLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).GetLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_GetLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).GetLoadBalancer(ctx, req.(*GetLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteLoadBalancer(ctx, req.(*DeleteLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateLoadBalancerTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateLoadBalancerTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateLoadBalancerTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateLoadBalancerTarget(ctx, req.(*CreateLoadBalancerTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListLoadBalancerTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListLoadBalancerTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListLoadBalancerTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListLoadBalancerTargets(ctx, req.(*ListLoadBalancerTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteLoadBalancerTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteLoadBalancerTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteLoadBalancerTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteLoadBalancerTarget(ctx, req.(*DeleteLoadBalancerTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateNat(ctx, req.(*CreateNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_GetNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).GetNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_GetNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).GetNat(ctx, req.(*GetNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteNat(ctx, req.(*DeleteNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListLocalNats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocalNatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListLocalNats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListLocalNats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListLocalNats(ctx, req.(*ListLocalNatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateNeighborNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNeighborNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateNeighborNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateNeighborNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateNeighborNat(ctx, req.(*CreateNeighborNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteNeighborNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNeighborNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteNeighborNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteNeighborNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteNeighborNat(ctx, req.(*DeleteNeighborNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListNeighborNats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNeighborNatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListNeighborNats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListNeighborNats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListNeighborNats(ctx, req.(*ListNeighborNatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CheckVniInUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVniInUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CheckVniInUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CheckVniInUse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CheckVniInUse(ctx, req.(*CheckVniInUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ResetVni_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetVniRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ResetVni(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ResetVni_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ResetVni(ctx, req.(*ResetVniRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_ListFirewallRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFirewallRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).ListFirewallRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_ListFirewallRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).ListFirewallRules(ctx, req.(*ListFirewallRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CreateFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CreateFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CreateFirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CreateFirewallRule(ctx, req.(*CreateFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_GetFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).GetFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_GetFirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).GetFirewallRule(ctx, req.(*GetFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_DeleteFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).DeleteFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_DeleteFirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).DeleteFirewallRule(ctx, req.(*DeleteFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CaptureStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CaptureStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CaptureStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CaptureStart(ctx, req.(*CaptureStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CaptureStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CaptureStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CaptureStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CaptureStop(ctx, req.(*CaptureStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKironcore_CaptureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKironcoreServer).CaptureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DPDKironcore_CaptureStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKironcoreServer).CaptureStatus(ctx, req.(*CaptureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DPDKironcore_ServiceDesc is the grpc.ServiceDesc for DPDKironcore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DPDKironcore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dpdkironcore.v1.DPDKironcore",
	HandlerType: (*DPDKironcoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInitialized",
			Handler:    _DPDKironcore_CheckInitialized_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _DPDKironcore_Initialize_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _DPDKironcore_GetVersion_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _DPDKironcore_ListInterfaces_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _DPDKironcore_GetInterface_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _DPDKironcore_CreateInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _DPDKironcore_DeleteInterface_Handler,
		},
		{
			MethodName: "ListPrefixes",
			Handler:    _DPDKironcore_ListPrefixes_Handler,
		},
		{
			MethodName: "CreatePrefix",
			Handler:    _DPDKironcore_CreatePrefix_Handler,
		},
		{
			MethodName: "DeletePrefix",
			Handler:    _DPDKironcore_DeletePrefix_Handler,
		},
		{
			MethodName: "ListLoadBalancerPrefixes",
			Handler:    _DPDKironcore_ListLoadBalancerPrefixes_Handler,
		},
		{
			MethodName: "CreateLoadBalancerPrefix",
			Handler:    _DPDKironcore_CreateLoadBalancerPrefix_Handler,
		},
		{
			MethodName: "DeleteLoadBalancerPrefix",
			Handler:    _DPDKironcore_DeleteLoadBalancerPrefix_Handler,
		},
		{
			MethodName: "CreateVip",
			Handler:    _DPDKironcore_CreateVip_Handler,
		},
		{
			MethodName: "GetVip",
			Handler:    _DPDKironcore_GetVip_Handler,
		},
		{
			MethodName: "DeleteVip",
			Handler:    _DPDKironcore_DeleteVip_Handler,
		},
		{
			MethodName: "CreateLoadBalancer",
			Handler:    _DPDKironcore_CreateLoadBalancer_Handler,
		},
		{
			MethodName: "GetLoadBalancer",
			Handler:    _DPDKironcore_GetLoadBalancer_Handler,
		},
		{
			MethodName: "DeleteLoadBalancer",
			Handler:    _DPDKironcore_DeleteLoadBalancer_Handler,
		},
		{
			MethodName: "CreateLoadBalancerTarget",
			Handler:    _DPDKironcore_CreateLoadBalancerTarget_Handler,
		},
		{
			MethodName: "ListLoadBalancerTargets",
			Handler:    _DPDKironcore_ListLoadBalancerTargets_Handler,
		},
		{
			MethodName: "DeleteLoadBalancerTarget",
			Handler:    _DPDKironcore_DeleteLoadBalancerTarget_Handler,
		},
		{
			MethodName: "CreateNat",
			Handler:    _DPDKironcore_CreateNat_Handler,
		},
		{
			MethodName: "GetNat",
			Handler:    _DPDKironcore_GetNat_Handler,
		},
		{
			MethodName: "DeleteNat",
			Handler:    _DPDKironcore_DeleteNat_Handler,
		},
		{
			MethodName: "ListLocalNats",
			Handler:    _DPDKironcore_ListLocalNats_Handler,
		},
		{
			MethodName: "CreateNeighborNat",
			Handler:    _DPDKironcore_CreateNeighborNat_Handler,
		},
		{
			MethodName: "DeleteNeighborNat",
			Handler:    _DPDKironcore_DeleteNeighborNat_Handler,
		},
		{
			MethodName: "ListNeighborNats",
			Handler:    _DPDKironcore_ListNeighborNats_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _DPDKironcore_ListRoutes_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _DPDKironcore_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _DPDKironcore_DeleteRoute_Handler,
		},
		{
			MethodName: "CheckVniInUse",
			Handler:    _DPDKironcore_CheckVniInUse_Handler,
		},
		{
			MethodName: "ResetVni",
			Handler:    _DPDKironcore_ResetVni_Handler,
		},
		{
			MethodName: "ListFirewallRules",
			Handler:    _DPDKironcore_ListFirewallRules_Handler,
		},
		{
			MethodName: "CreateFirewallRule",
			Handler:    _DPDKironcore_CreateFirewallRule_Handler,
		},
		{
			MethodName: "GetFirewallRule",
			Handler:    _DPDKironcore_GetFirewallRule_Handler,
		},
		{
			MethodName: "DeleteFirewallRule",
			Handler:    _DPDKironcore_DeleteFirewallRule_Handler,
		},
		{
			MethodName: "CaptureStart",
			Handler:    _DPDKironcore_CaptureStart_Handler,
		},
		{
			MethodName: "CaptureStop",
			Handler:    _DPDKironcore_CaptureStop_Handler,
		},
		{
			MethodName: "CaptureStatus",
			Handler:    _DPDKironcore_CaptureStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dpdk.proto",
}
