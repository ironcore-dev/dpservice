// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dpdk.proto

#include "dpdk.pb.h"
#include "dpdk.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dpdkonmetal {

static const char* PrintHelloWorldService_method_names[] = {
  "/dpdkonmetal.PrintHelloWorldService/QueryHelloWorld",
};

std::unique_ptr< PrintHelloWorldService::Stub> PrintHelloWorldService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PrintHelloWorldService::Stub> stub(new PrintHelloWorldService::Stub(channel));
  return stub;
}

PrintHelloWorldService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_QueryHelloWorld_(PrintHelloWorldService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PrintHelloWorldService::Stub::QueryHelloWorld(::grpc::ClientContext* context, const ::dpdkonmetal::Empty& request, ::dpdkonmetal::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryHelloWorld_, context, request, response);
}

void PrintHelloWorldService::Stub::experimental_async::QueryHelloWorld(::grpc::ClientContext* context, const ::dpdkonmetal::Empty* request, ::dpdkonmetal::Status* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryHelloWorld_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dpdkonmetal::Status>* PrintHelloWorldService::Stub::AsyncQueryHelloWorldRaw(::grpc::ClientContext* context, const ::dpdkonmetal::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dpdkonmetal::Status>::Create(channel_.get(), cq, rpcmethod_QueryHelloWorld_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dpdkonmetal::Status>* PrintHelloWorldService::Stub::PrepareAsyncQueryHelloWorldRaw(::grpc::ClientContext* context, const ::dpdkonmetal::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dpdkonmetal::Status>::Create(channel_.get(), cq, rpcmethod_QueryHelloWorld_, context, request, false);
}

PrintHelloWorldService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrintHelloWorldService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrintHelloWorldService::Service, ::dpdkonmetal::Empty, ::dpdkonmetal::Status>(
          std::mem_fn(&PrintHelloWorldService::Service::QueryHelloWorld), this)));
}

PrintHelloWorldService::Service::~Service() {
}

::grpc::Status PrintHelloWorldService::Service::QueryHelloWorld(::grpc::ServerContext* context, const ::dpdkonmetal::Empty* request, ::dpdkonmetal::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dpdkonmetal

