#ifndef __INCLUDE_DP_ERROR_H__
#define __INCLUDE_DP_ERROR_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <rte_errno.h>

#define DP_OK 0
#define DP_ERROR (-RTE_MAX_ERRNO)

// NOTICE: these can be used directly with a function call, do not use RET multiple times
#define DP_FAILED(RET) \
	((RET) < 0)
#define DP_FAILED_LOG(RET, LOGGER, ...) \
	(DP_FAILED(RET) ? LOGGER(__VA_ARGS__), true : false)

const char *dp_strerror(int error);


/*
 * GRPC error values, do not change them!
 */
#define _DP_GRPC_ERRORS(ERR) \
	ERR(VM_ADD,								100) \
	ERR(VM_ADD_IPV6_FORMAT,					101) \
	ERR(VM_ADD_VM_NAME_ERR,					102) \
	ERR(VM_ADD_VM_LPM4,						104) \
	ERR(VM_ADD_VM_LPM6,						105) \
	ERR(VM_ADD_VM_ADD_ROUT4,				106) \
	ERR(VM_ADD_VM_ADD_ROUT6,				107) \
	ERR(VM_ADD_VM_NO_VFS,					108) \
	ERR(VM_ALREADY_ALLOCATED,				109) \
	ERR(VM_CANT_GET_NAME,					110) \
	ERR(VM_ADD_VM_VNF_ERROR,				111) \
	ERR(VM_ADD_VM_PORT_START,				112) \
	ERR(VM_DEL,								150) \
	ERR(VM_DEL_VM_NOT_FND,					151) \
	ERR(VM_GET_VM_NOT_FND,					171) \
	ERR(VM_LIST,							200) \
	ERR(VM_ADD_RT,							250) \
	ERR(VM_ADD_RT_FAIL4,					251) \
	ERR(VM_ADD_RT_FAIL6,					252) \
	ERR(VM_ADD_RT_NO_VM,					253) \
	ERR(VM_DEL_RT,							300) \
	ERR(VM_GET_NETNAT_ITER_ERROR,			349) \
	ERR(VM_ADD_NAT,							350) \
	ERR(VM_ADD_NAT_IP_EXISTS,				351) \
	ERR(VM_ADD_NAT_ALLOC,					352) \
	ERR(VM_ADD_NAT_ADD_KEY,					353) \
	ERR(VM_ADD_NET_NAT_DATA,				354) \
	ERR(VM_ADD_NETWORK_NAT,					355) \
	ERR(VM_DEL_NETWORK_NAT,					356) \
	ERR(VM_ADD_NETNAT_NONLOCAL,				357) \
	ERR(VM_ADD_NETNAT_INVALID_PORT,			358) \
	ERR(VM_ADD_NETNAT_DATA_NOT_FOUND,		359) \
	ERR(VM_DEL_NETNAT_NONLOCAL,				360) \
	ERR(VM_DEL_NETNAT_INVALID_PORT,			361) \
	ERR(VM_DEL_NETNAT_ENTRY_NOT_FOUND,		362) \
	ERR(VM_ADD_NETNAT_IP_EXISTS,			363) \
	ERR(VM_ADD_NETNAT_KEY,					364) \
	ERR(VM_ADD_NETNAT_ALLO_DATA,			365) \
	ERR(VM_ADD_NETNAT_ADD_DATA,				366) \
	ERR(VM_DEL_NETNAT_KEY_DELETED,			367) \
	ERR(VM_GET_NETNAT_IPV6_UNSUPPORTED,		369) \
	ERR(VM_ADD_NEIGHNAT_WRONGTYPE,			370) \
	ERR(VM_DEL_NEIGHNAT_WRONGTYPE,			371) \
	ERR(VM_ADD_NEIGHNAT_ENTRY_EXIST,		372) \
	ERR(VM_ADD_NEIGHNAT_ALLOC,				373) \
	ERR(VM_DEL_NEIGHNAT_ENTRY_NOFOUND,		374) \
	ERR(VM_GET_NEIGHNAT_UNDER_IPV6,			375) \
	ERR(VM_GET_NETNAT_INFO_TYPE_UNKNOWN,	376) \
	ERR(VM_ADD_NAT_VNF_ERR,					377) \
	ERR(VM_ADD_DNAT,						400) \
	ERR(VM_ADD_DNAT_IP_EXISTS,				401) \
	ERR(VM_ADD_DNAT_ALLOC,					402) \
	ERR(VM_ADD_DNAT_ADD_KEY,				403) \
	ERR(VM_ADD_DNAT_ADD_DATA,				404) \
	ERR(VM_DEL_NAT,							450) \
	ERR(VM_DEL_NAT_NO_SNAT,					451) \
	ERR(VM_GET_NAT,							500) \
	ERR(VM_GET_NAT_NO_IP_SET,				501) \
	ERR(VM_ADD_LB_VIP,						550) \
	ERR(VM_ADD_LB_NO_VNI_EXIST,				551) \
	ERR(VM_ADD_LB_UNSUPP_IP,				552) \
	ERR(VM_DEL_LB_VIP,						600) \
	ERR(VM_DEL_LB_NO_VNI_EXIST,				601) \
	ERR(VM_DEL_LB_UNSUPP_IP,				602) \
	ERR(VM_ADD_PFX,							650) \
	ERR(VM_ADD_PFX_NO_VM,					651) \
	ERR(VM_ADD_PFX_ROUTE,					652) \
	ERR(VM_ADD_PFX_VNF_ERR,					653) \
	ERR(VM_DEL_PFX,							700) \
	ERR(VM_DEL_PFX_NO_VM,					701) \
	ERR(VM_INIT_RESET_ERR,					710) \
	ERR(CREATE_LB_UNSUPP_IP,				750) \
	ERR(CREATE_LB_ERR,						751) \
	ERR(CREATE_LB_VNF_ERR,					752) \
	ERR(CREATE_LB_ROUT_ERR,					753) \
	ERR(DEL_LB_ID_ERR,						755) \
	ERR(DEL_LB_BACK_IP_ERR,					756) \
	ERR(DEL_LB_ROUTE_ERR,					757) \
	ERR(GET_LB_ID_ERR,						760) \
	ERR(GET_LB_BACK_IP_ERR,					761) \
	ERR(VM_ADD_FWALL_ERR,					800) \
	ERR(VM_ADD_FWALL_RULE_ERR,				801) \
	ERR(VM_ADD_FWALL_NO_DROP_SUPPORT,		802) \
	ERR(VM_ADD_FWALL_ID_EXISTS,				803) \
	ERR(VM_GET_FWALL_ERR,					810) \
	ERR(VM_GET_NO_FWALL_RULE_ERR,			811) \
	ERR(VM_DEL_FWALL_ERR,					820) \
	ERR(VM_DEL_NO_FWALL_RULE_ERR,			821) \

#define _DP_GRPC_ERROR_ENUM(NAME, NUMBER) \
	DP_ERROR_##NAME = NUMBER,
enum dp_grpc_error {
	_DP_GRPC_ERRORS(_DP_GRPC_ERROR_ENUM)
};

const char *dp_grpc_strerror(int errcode);

#ifdef __cplusplus
}
#endif
#endif
