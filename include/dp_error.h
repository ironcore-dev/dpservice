#ifndef __INCLUDE_DP_ERROR_H__
#define __INCLUDE_DP_ERROR_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <rte_errno.h>

#define DP_OK 0
#define DP_ERROR (-RTE_MAX_ERRNO)

// NOTICE: these can be used directly with a function call, do not use RET multiple times
#define DP_FAILED(RET) \
	((RET) < 0)
#define DP_FAILED_LOG(RET, LOGGER, ...) \
	(DP_FAILED(RET) ? LOGGER(__VA_ARGS__), true : false)

const char *dp_strerror(int error);


/*
 * GRPC error values, do not change them!
 */
// TODO(plague): separate _NATVIP_ errors into _NAT_ and _VIP_ equivalents (and maybe separate prefix and lb prefix)
#define _DP_GRPC_ERRORS(ERR) \
	ERR(_ADD_IFACE,							100) \
	ERR(_ADD_IFACE_IPV6_FORMAT,				101) \
	ERR(ADD_IFACE_HANDLE_ERR,				102) \
	ERR(ADD_IFACE_LPM4_ERR,					104) \
	ERR(ADD_IFACE_LPM6_ERR,					105) \
	ERR(ADD_IFACE_ROUTE4_ERR,				106) \
	ERR(ADD_IFACE_ROUTE6_ERR,				107) \
	ERR(ADD_IFACE_NO_VFS,					108) \
	ERR(ADD_IFACE_ALREADY_ALLOCATED,		109) \
	ERR(ADD_IFACE_BAD_DEVICE_NAME,			110) \
	ERR(ADD_IFACE_VNF_ERR,					111) \
	ERR(ADD_IFACE_PORT_START_ERR,			112) \
	ERR(_DEL_IFACE,							150) \
	ERR(DEL_IFACE_NOT_FOUND,				151) \
	ERR(GET_IFACE_NOT_FOUND,				171) \
	ERR(_LIST_IFACES,						200) \
	ERR(_ADD_ROUTE,							250) \
	ERR(ADD_ROUTE_FAIL4,					251) \
	ERR(ADD_ROUTE_FAIL6,					252) \
	ERR(ADD_ROUTE_NO_VM,					253) \
	ERR(DEL_ROUTE,							300) \
	ERR(GET_NAT_ITER_ERR,					349) \
	ERR(ADD_VIP_NO_SNAT_DATA,				350) \
	ERR(ADD_VIP_IP_EXISTS,					351) \
	ERR(ADD_VIP_SNAT_KEY_ERR,				352) \
	ERR(ADD_VIP_SNAT_ALLOC,					353) \
	ERR(ADD_VIP_SNAT_DATA_ERR,				354) \
	ERR(_ADD_NAT,							355) \
	ERR(_DEL_NAT,							356) \
	ERR(_ADD_NAT_NONLOCAL,					357) \
	ERR(_ADD_NAT_INVALID_PORT,				358) \
	ERR(ADD_NAT_NO_SNAT_DATA,				359) \
	ERR(_DEL_NAT_NONLOCAL,					360) \
	ERR(_DEL_NAT_INVALID_PORT,				361) \
	ERR(DEL_NAT_NOT_FOUND,					362) \
	ERR(ADD_NAT_IP_EXISTS,					363) \
	ERR(ADD_NAT_SNAT_KEY_ERR,				364) \
	ERR(ADD_NAT_SNAT_ALLOC,					365) \
	ERR(ADD_NAT_SNAT_DATA_ERR,				366) \
	ERR(DEL_NAT_ALREADY_DELETED,			367) \
	ERR(GET_NATINFO_NO_IPV6_SUPPORT,		369) \
	ERR(ADD_NEIGHNAT_WRONGTYPE,				370) \
	ERR(DEL_NEIGHNAT_WRONGTYPE,				371) \
	ERR(ADD_NEIGHNAT_ALREADY_EXISTS,		372) \
	ERR(ADD_NEIGHNAT_ALLOC,					373) \
	ERR(DEL_NEIGHNAT_NOT_FOUND,				374) \
	ERR(_GET_NEIGHNAT_UNDER_IPV6,			375) \
	ERR(GET_NATINFO_WRONGTYPE,				376) \
	ERR(ADD_NATVIP_VNF_ERR,					377) \
	ERR(_ADD_DNAT,							400) \
	ERR(ADD_DNAT_IP_EXISTS,					401) \
	ERR(ADD_DNAT_KEY_ERR,					402) \
	ERR(ADD_DNAT_ALLOC,						403) \
	ERR(ADD_DNAT_DATA_ERR,					404) \
	ERR(DEL_VIP_NO_VM,						450) \
	ERR(DEL_NATVIP_NO_SNAT,					451) \
	ERR(GET_NATVIP_NO_VM,					500) \
	ERR(GET_NATVIP_NO_IP_SET,				501) \
	ERR(ADD_LBVIP_BACKIP_ERR,				550) \
	ERR(_ADD_LBVIP_NO_VNI,					551) \
	ERR(ADD_LBVIP_UNSUPP_IP,				552) \
	ERR(DEL_LBVIP_BACKIP_ERR,				600) \
	ERR(_DEL_LBVIP_NO_VNI,					601) \
	ERR(DEL_LBVIP_UNSUPP_IP,				602) \
	ERR(_ADD_PREFIX,						650) \
	ERR(ADD_PREFIX_NO_VM,					651) \
	ERR(ADD_PREFIX_ROUTE,					652) \
	ERR(ADD_PREFIX_VNF_ERR,					653) \
	ERR(DEL_PREFIX_ROUTE_ERR,				700) \
	ERR(DEL_PREFIX_NO_VM,					701) \
	ERR(INIT_RESET_ERR,						710) \
	ERR(VNI_TABLE_RESET_ERR,				711) \
	ERR(ADD_LB_UNSUPP_IP,					750) \
	ERR(ADD_LB_CREATE_ERR,					751) \
	ERR(ADD_LB_VNF_ERR,						752) \
	ERR(ADD_LB_ROUTE_ERR,					753) \
	ERR(DEL_LB_ID_ERR,						755) \
	ERR(DEL_LB_BACK_IP_ERR,					756) \
	ERR(DEL_LB_ROUTE_ERR,					757) \
	ERR(GET_LB_ID_ERR,						760) \
	ERR(GET_LB_BACK_IP_ERR,					761) \
	ERR(ADD_FWRULE_NO_VM,					800) \
	ERR(ADD_FWRULE_ALLOC_ERR,				801) \
	ERR(ADD_FWRULE_NO_DROP_SUPPORT,			802) \
	ERR(ADD_FWRULE_ID_EXISTS,				803) \
	ERR(GET_FWRULE_NO_VM,					810) \
	ERR(GET_FWRULE_NOT_FOUND,				811) \
	ERR(DEL_FWRULE_NO_VM,					820) \
	ERR(DEL_FWRULE_NOT_FOUND,				821) \

#define _DP_GRPC_ERROR_ENUM(NAME, NUMBER) \
	DP_GRPC_ERR_##NAME = NUMBER,
enum dp_grpc_error {
	_DP_GRPC_ERRORS(_DP_GRPC_ERROR_ENUM)
};

const char *dp_grpc_strerror(int errcode);

#ifdef __cplusplus
}
#endif
#endif
