#ifndef __INCLUDE_DP_ERROR_H__
#define __INCLUDE_DP_ERROR_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <rte_errno.h>

#define DP_OK 0
#define DP_ERROR (-RTE_MAX_ERRNO)

// NOTICE: these can be used directly with a function call, do not use RET multiple times
#define DP_FAILED(RET) \
	((RET) < 0)
#define DP_FAILED_LOG(RET, LOGGER, ...) \
	(DP_FAILED(RET) ? LOGGER(__VA_ARGS__), true : false)

const char *dp_strerror(int error);


/*
 * GRPC error values, do not change them!
 */
#define _DP_GRPC_ERRORS(ERR) \
	ERR(ADD_IFACE_HANDLE_ERR,				101) \
	ERR(ADD_IFACE_LPM4_ERR,					102) \
	ERR(ADD_IFACE_LPM6_ERR,					103) \
	ERR(ADD_IFACE_NO_VFS,					104) \
	ERR(ADD_IFACE_ALREADY_ALLOCATED,		105) \
	ERR(ADD_IFACE_BAD_DEVICE_NAME,			106) \
	ERR(ADD_IFACE_VNF_ERR,					107) \
	ERR(ADD_IFACE_PORT_START_ERR,			108) \
	ERR(DEL_IFACE_NOT_FOUND,				131) \
	ERR(GET_IFACE_NOT_FOUND,				151) \
	ERR(ADD_PREFIX_NO_VM,					171) \
	ERR(ADD_PREFIX_ROUTE_ERR,				172) \
	ERR(ADD_PREFIX_VNF_ERR,					173) \
	ERR(DEL_PREFIX_ROUTE_ERR,				181) \
	ERR(DEL_PREFIX_NO_VM,					182) \
	ERR(ADD_ROUTE_NO_VM,					201) \
	ERR(ADD_ROUTE_EXISTS,					202) \
	ERR(ADD_ROUTE_SET_ERR,					203) \
	ERR(ADD_ROUTE_INSERT_ERR,				204) \
	ERR(DEL_ROUTE_NO_VM,					231) \
	ERR(DEL_ROUTE_NOT_FOUND,				232) \
	ERR(DEL_ROUTE_BAD_PORT,					233) \
	ERR(INIT_RESET_ERR,						251) \
	ERR(ADD_VIP_NO_VM,						301) \
	ERR(ADD_VIP_NO_SNAT_DATA,				302) \
	ERR(ADD_VIP_IP_EXISTS,					303) \
	ERR(ADD_VIP_SNAT_KEY_ERR,				304) \
	ERR(ADD_VIP_SNAT_ALLOC,					305) \
	ERR(ADD_VIP_SNAT_DATA_ERR,				306) \
	ERR(ADD_VIP_VNF_ERR,					307) \
	ERR(DEL_VIP_NO_VM,						331) \
	ERR(DEL_VIP_NO_SNAT_DATA,				332) \
	ERR(GET_VIP_NO_VM,						351) \
	ERR(GET_VIP_NO_IP_SET,					352) \
	ERR(ADD_DNAT_IP_EXISTS,					371) \
	ERR(ADD_DNAT_KEY_ERR,					372) \
	ERR(ADD_DNAT_ALLOC,						373) \
	ERR(ADD_DNAT_DATA_ERR,					374) \
	ERR(ADD_NAT_NO_VM,						401) \
	ERR(ADD_NAT_NO_SNAT_DATA,				402) \
	ERR(ADD_NAT_IP_EXISTS,					403) \
	ERR(ADD_NAT_SNAT_KEY_ERR,				404) \
	ERR(ADD_NAT_SNAT_ALLOC,					405) \
	ERR(ADD_NAT_SNAT_DATA_ERR,				406) \
	ERR(ADD_NAT_VNF_ERR,					407) \
	ERR(DEL_NAT_NO_SNAT_DATA,				431) \
	ERR(DEL_NAT_NO_VM,						432) \
	ERR(DEL_NAT_NOT_FOUND,					433) \
	ERR(DEL_NAT_ALREADY_DELETED,			434) \
	ERR(GET_NAT_ITER_ERR,					451) \
	ERR(GET_NAT_NO_VM,						452) \
	ERR(GET_NAT_NO_IP_SET,					453) \
	ERR(GET_NATINFO_NO_IPV6_SUPPORT,		471) \
	ERR(GET_NATINFO_WRONGTYPE,				472) \
	ERR(ADD_NEIGHNAT_WRONGTYPE,				481) \
	ERR(ADD_NEIGHNAT_ALREADY_EXISTS,		482) \
	ERR(ADD_NEIGHNAT_ALLOC,					483) \
	ERR(DEL_NEIGHNAT_WRONGTYPE,				491) \
	ERR(DEL_NEIGHNAT_NOT_FOUND,				492) \
	ERR(ADD_LB_UNSUPP_IP,					501) \
	ERR(ADD_LB_CREATE_ERR,					502) \
	ERR(ADD_LB_VNF_ERR,						503) \
	ERR(ADD_LB_ROUTE_ERR,					504) \
	ERR(DEL_LB_ID_ERR,						531) \
	ERR(DEL_LB_BACK_IP_ERR,					532) \
	ERR(DEL_LB_ROUTE_ERR,					533) \
	ERR(GET_LB_ID_ERR,						551) \
	ERR(GET_LB_BACK_IP_ERR,					552) \
	ERR(ADD_LBVIP_BACKIP_ERR,				571) \
	ERR(ADD_LBVIP_UNSUPP_IP,				572) \
	ERR(DEL_LBVIP_BACKIP_ERR,				581) \
	ERR(DEL_LBVIP_UNSUPP_IP,				582) \
	ERR(ADD_FWRULE_NO_VM,					601) \
	ERR(ADD_FWRULE_ALLOC_ERR,				602) \
	ERR(ADD_FWRULE_NO_DROP_SUPPORT,			603) \
	ERR(ADD_FWRULE_ID_EXISTS,				604) \
	ERR(DEL_FWRULE_NO_VM,					631) \
	ERR(DEL_FWRULE_NOT_FOUND,				632) \
	ERR(GET_FWRULE_NO_VM,					651) \
	ERR(GET_FWRULE_NOT_FOUND,				652) \

#define _DP_GRPC_ERROR_ENUM(NAME, NUMBER) \
	DP_GRPC_ERR_##NAME = NUMBER,
enum dp_grpc_error {
	_DP_GRPC_ERRORS(_DP_GRPC_ERROR_ENUM)
};

const char *dp_grpc_strerror(int errcode);

#ifdef __cplusplus
}
#endif
#endif
